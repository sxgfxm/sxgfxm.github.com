<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Leetcode | Light's Blog]]></title>
  <link href="http://sxgfxm.github.io/blog/categories/leetcode/atom.xml" rel="self"/>
  <link href="http://sxgfxm.github.io/"/>
  <updated>2018-09-18T21:18:05+08:00</updated>
  <id>http://sxgfxm.github.io/</id>
  <author>
    <name><![CDATA[Light]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[LeetCode Problems之 分治法]]></title>
    <link href="http://sxgfxm.github.io/blog/2018/09/18/leetcode-problemszhi-fen-zhi-fa/"/>
    <updated>2018-09-18T21:11:05+08:00</updated>
    <id>http://sxgfxm.github.io/blog/2018/09/18/leetcode-problemszhi-fen-zhi-fa</id>
    <content type="html"><![CDATA[<h2>分治法</h2>

<p>以下为 LeetCode 分治法 相关问题解法记录。</p>

<!-- more -->


<h3><a href="https://leetcode-cn.com/problems/maximum-subarray/description/">53. 最大子序和</a></h3>

<p>问题分析：求连续子序列最大和。<br/>
方法一：模拟。<br/>
代码：<br/>
<code>swift
class Solution {
    func maxSubArray(_ nums: [Int]) -&gt; Int {
        var maxValue = Int.min
        for i in 0..&lt;nums.count {
            var sum = nums[i]
            if maxValue &lt; sum {
                maxValue = sum
            }
            for j in (i+1)..&lt;nums.count {
                sum = sum + nums[j]
                if maxValue &lt; sum {
                    maxValue = sum
                }
            }
        }
        return maxValue
    }
}
</code>
方法二：动态规划。<br/>
代码：<br/>
<code>
//  待完成
</code><br/>
方法三：分治法。<br/>
<code>
//  待完成
</code><br/>
启发：<strong>连续子序列问题</strong>，分治法。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LeetCode Problems 链表]]></title>
    <link href="http://sxgfxm.github.io/blog/2018/09/17/leetcode-problems-lian-biao/"/>
    <updated>2018-09-17T21:17:45+08:00</updated>
    <id>http://sxgfxm.github.io/blog/2018/09/17/leetcode-problems-lian-biao</id>
    <content type="html"><![CDATA[<h2>链表</h2>

<p>以下为 LeetCode 链表 相关问题解法记录。</p>

<!-- more -->


<h3><a href="https://leetcode-cn.com/problems/merge-sorted-array/description/">88. 合并两个有序数组</a></h3>

<p>问题分析：链表。<br/>
代码：<br/>
<code>swift
class Solution {
    func merge(_ nums1: inout [Int], _ m: Int, _ nums2: [Int], _ n: Int) {
        var nums: [Int] = []
        for i in 0..&lt;m {
            nums.append(nums1[i])
        }
        for i in 0..&lt;n {
            nums.append(nums2[i])
        }
        nums1 = nums.sorted{$0 &lt; $1}
        print(nums1)
    }
}
</code>
启发：需要用 <strong>链表</strong> 实现。<br/>
状态：优于56%的提交。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LeetCode Problems 之 深度优先搜索]]></title>
    <link href="http://sxgfxm.github.io/blog/2018/09/10/leetcode-problems-zhi-shen-du-you-xian-sou-suo/"/>
    <updated>2018-09-10T21:55:31+08:00</updated>
    <id>http://sxgfxm.github.io/blog/2018/09/10/leetcode-problems-zhi-shen-du-you-xian-sou-suo</id>
    <content type="html"><![CDATA[<h2>深度优先搜索</h2>

<p>以下为 LeetCode 深度优先搜索 相关问题解法记录。</p>

<!-- more -->


<h3><a href="https://leetcode-cn.com/problems/1-bit-and-2-bit-characters/description/">717. 1比特与2比特字符</a></h3>

<p>问题分析：深度优先搜索，按状态转移搜索。<br/>
代码：<br/>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">class</span> <span class="n">Solution</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">func</span> <span class="n">isOneBitCharacter</span><span class="p">(</span><span class="n">_</span> <span class="nl">bits</span><span class="p">:</span> <span class="p">[</span><span class="n">Int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">Bool</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">dfs</span><span class="p">(</span><span class="n">bits</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">func</span> <span class="n">dfs</span><span class="p">(</span><span class="n">_</span> <span class="nl">bits</span><span class="p">:[</span><span class="n">Int</span><span class="p">],</span> <span class="n">_</span> <span class="nl">index</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">Bool</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">index</span> <span class="o">==</span> <span class="n">bits</span><span class="p">.</span><span class="n">count</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">bits</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">true</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">index</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="n">bits</span><span class="p">.</span><span class="n">count</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">false</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">index</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">bits</span><span class="p">.</span><span class="n">count</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">bits</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">dfs</span><span class="p">(</span><span class="n">bits</span><span class="p">,</span> <span class="n">index</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">index</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">bits</span><span class="p">.</span><span class="n">count</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">bits</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">bits</span><span class="p">[</span><span class="n">index</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">dfs</span><span class="p">(</span><span class="n">bits</span><span class="p">,</span> <span class="n">index</span> <span class="o">+</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">bits</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">bits</span><span class="p">[</span><span class="n">index</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">dfs</span><span class="p">(</span><span class="n">bits</span><span class="p">,</span> <span class="n">index</span> <span class="o">+</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">false</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
启发：按状态转移搜索。<br/>
状态：优于100%的提交。</p>

<h3><a href="https://leetcode-cn.com/problems/max-area-of-island/description/">695. 岛屿的最大面积</a></h3>

<p>问题分析：非回溯4个方向求和。<br/>
代码：<br/>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">class</span> <span class="n">Solution</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="n">maxCount</span> <span class="o">=</span> <span class="mi">0</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">let</span> <span class="n">transform</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">],[</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">],[</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">],[</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">]]</span>
</span><span class='line'>
</span><span class='line'><span class="k">func</span> <span class="n">maxAreaOfIsland</span><span class="p">(</span><span class="n">_</span> <span class="nl">grid</span><span class="p">:</span> <span class="p">[[</span><span class="n">Int</span><span class="p">]])</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">Int</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="n">grid</span> <span class="o">=</span> <span class="n">grid</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mf">0.</span><span class="p">.</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">grid</span><span class="p">.</span><span class="n">count</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">j</span> <span class="k">in</span> <span class="mf">0.</span><span class="p">.</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">grid</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">count</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">grid</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">let</span> <span class="n">count</span> <span class="o">=</span> <span class="n">dfs</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">grid</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">)</span>
</span><span class='line'>                <span class="k">if</span> <span class="n">maxCount</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">count</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">maxCount</span> <span class="o">=</span> <span class="n">count</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">maxCount</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">func</span> <span class="n">dfs</span><span class="p">(</span><span class="n">_</span> <span class="nl">grid</span><span class="p">:</span> <span class="k">inout</span> <span class="p">[[</span><span class="n">Int</span><span class="p">]],</span> <span class="n">_</span> <span class="nl">x</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span> <span class="n">_</span> <span class="nl">y</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">Int</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">x</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="mi">0</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">x</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">grid</span><span class="p">.</span><span class="n">count</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">y</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="mi">0</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">y</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">grid</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">count</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">grid</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">grid</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>        <span class="k">var</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mf">0.</span><span class="p">.</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="mi">4</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">xx</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">transform</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">yy</span> <span class="o">=</span> <span class="n">y</span> <span class="o">+</span> <span class="n">transform</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>            <span class="n">count</span> <span class="o">=</span> <span class="n">count</span> <span class="o">+</span> <span class="n">dfs</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">grid</span><span class="p">,</span> <span class="n">xx</span><span class="p">,</span> <span class="n">yy</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">count</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">0</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3><a href="https://leetcode-cn.com/problems/number-of-islands/description/">200. 岛屿的个数</a></h3>

<p>问题分析：深度优先遍历，遇到0置为1，非回溯。<br/>
代码：<br/>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">class</span> <span class="n">Solution</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">transform</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">],[</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">],[</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">],[</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">]]</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">func</span> <span class="n">numIslands</span><span class="p">(</span><span class="n">_</span> <span class="nl">grid</span><span class="p">:</span> <span class="p">[[</span><span class="n">Character</span><span class="p">]])</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">Int</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="n">grid</span> <span class="o">=</span> <span class="n">grid</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mf">0.</span><span class="p">.</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">grid</span><span class="p">.</span><span class="n">count</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">j</span> <span class="k">in</span> <span class="mf">0.</span><span class="p">.</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">grid</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">count</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">grid</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="s">&quot;1&quot;</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">dfs</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">grid</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">)</span>
</span><span class='line'>                <span class="n">count</span> <span class="o">=</span> <span class="n">count</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">count</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">func</span> <span class="n">dfs</span><span class="p">(</span><span class="n">_</span> <span class="nl">grid</span><span class="p">:</span> <span class="k">inout</span> <span class="p">[[</span><span class="n">Character</span><span class="p">]],</span> <span class="n">_</span> <span class="nl">x</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span> <span class="n">_</span> <span class="nl">y</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">Void</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">grid</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">=</span> <span class="s">&quot;0&quot;</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mf">0.</span><span class="p">.</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="mi">4</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">xx</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">transform</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">yy</span> <span class="o">=</span> <span class="n">y</span> <span class="o">+</span> <span class="n">transform</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">xx</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="mi">0</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">xx</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">grid</span><span class="p">.</span><span class="n">count</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">yy</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="mi">0</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">yy</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">grid</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">count</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">grid</span><span class="p">[</span><span class="n">xx</span><span class="p">][</span><span class="n">yy</span><span class="p">]</span> <span class="o">==</span> <span class="s">&quot;1&quot;</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">dfs</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">grid</span><span class="p">,</span> <span class="n">xx</span><span class="p">,</span> <span class="n">yy</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LeetCode Problems 之 数学]]></title>
    <link href="http://sxgfxm.github.io/blog/2018/09/10/leetcode-problems-zhi-shu-xue/"/>
    <updated>2018-09-10T21:54:51+08:00</updated>
    <id>http://sxgfxm.github.io/blog/2018/09/10/leetcode-problems-zhi-shu-xue</id>
    <content type="html"><![CDATA[<h2>数学</h2>

<p>以下为 LeetCode 数学 相关问题解法记录。</p>

<!-- more -->


<h3><a href="https://leetcode-cn.com/problems/power-of-three/description/">326. 3的幂</a></h3>

<p>方法一：模拟3的幂的过程，直到等于或超过给定的值，<strong>时间复杂度为多少？</strong>。<br/>
方法二：通过数学公式转化，3<sup>m</sup> = n，log(3<sup>m</sup>) = logn，mlog3 = logn，m = logn / log3，判断m是否为整数即可，时间复杂度 O(1)。<br/>
代码：<br/>
<code>swift
class Solution {
    func isPowerOfThree(_ n: Int) -&gt; Bool {
        if n == 0 {
            return false
        }
        let m = log10(Double(n)) / log10(3.0)
        return m - floor(m) == 0
    }
}
</code>
启发：通过数学公式简单的变化，将原问题转化为可直接计算的问题，降低复杂度。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LeetCode Problems 之 位运算]]></title>
    <link href="http://sxgfxm.github.io/blog/2018/09/10/leetcode-problems-zhi-wei-yun-suan/"/>
    <updated>2018-09-10T21:53:58+08:00</updated>
    <id>http://sxgfxm.github.io/blog/2018/09/10/leetcode-problems-zhi-wei-yun-suan</id>
    <content type="html"><![CDATA[<h2>位运算</h2>

<p>以下为 LeetCode 位运算 相关问题解法记录。</p>

<!-- more -->


<h3><a href="https://leetcode-cn.com/problems/power-of-two/description/">231. 2的幂</a></h3>

<p>方法一、二：同题目<a href="https://leetcode-cn.com/problems/power-of-three/description/">326. 3的幂</a>。<br/>
方法三：考察2的幂的特性，转化为二进制形式为1后面n个0，可以通过位运算来判断是否符合该形式。<br/>
代码：<br/>
<code>swift
class Solution {
    func isPowerOfTwo(_ n: Int) -&gt; Bool {
      if n == 0 {
            return false
        }
        return (n - 1) &amp; n == 0
    }
}
</code>
启发：有时候可以考察数字的二进制、八进制、十六进制形式，从中寻找规律。</p>

<h3><a href="https://leetcode-cn.com/problems/power-of-four/description/">342. 4的幂</a></h3>

<p>方法一、二、三：同题目<a href="https://leetcode-cn.com/problems/power-of-two/description/">231. 2的幂</a>，位运算方式稍微改变。<br/>
代码：<br/>
<code>
class Solution {
    func isPowerOfFour(_ n: Int) -&gt; Bool {
    }
}
</code>
积累：负数的位运算操作。格式化输出。</p>
]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ios | Light's Blog]]></title>
  <link href="http://sxgfxm.github.io/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://sxgfxm.github.io/"/>
  <updated>2017-11-02T10:58:53+08:00</updated>
  <id>http://sxgfxm.github.io/</id>
  <author>
    <name><![CDATA[Light]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOS知识小集-171023]]></title>
    <link href="http://sxgfxm.github.io/blog/2017/11/02/ioszhi-shi-xiao-ji-171023/"/>
    <updated>2017-11-02T10:34:10+08:00</updated>
    <id>http://sxgfxm.github.io/blog/2017/11/02/ioszhi-shi-xiao-ji-171023</id>
    <content type="html"><![CDATA[<h2>UITableView AccessoryView TintColor</h2>

<p>通过设置Cell的TintColor来设置AccessoryView的tintColor。</p>

<h2>Git Rebase</h2>

<p><code>git rebase</code>会删除<code>merge commit</code>。<br/>
进行merge操作后不要向其amend代码。</p>

<!-- more -->


<h2>UITableViewCell</h2>

<p>注意在返回cell的代理方法中，不要重复创建view。</p>

<h2>UITableViewCell高度自适应</h2>

<ol>
<li><code>estimatedRowHeight</code>；</li>
<li><code>-systemLayoutSizeFittingSize:</code> + cache height；</li>
<li>ComponentKit；</li>
</ol>


<h2>layoutIfNeeded、setNeedsLayout、setNeedsDisplay</h2>

<p>// TODO</p>

<h2>动态更新Cell高度</h2>

<pre><code class="objective-c">  [self.tableView beginUpdates];
  [self.tableView endUpdates];
</code></pre>

<h2>UIImageView Animation</h2>

<pre><code class="objective-c">  self.imageView = [[UIImageView alloc] initWithFrame:CGRectMake(100, 200, 50, 50)];
  self.imageView.animationImages = @[[UIImage imageNamed:@"Image1"],[UIImage imageNamed:@"Image2"],[UIImage imageNamed:@"Image3"]];
  self.imageView.animationDuration = 0.75;
  self.imageView.animationRepeatCount = 10;
  [self.view addSubview:self.imageView];
  [self.imageView startAnimating];
  [self.imageView stopAnimating];
</code></pre>

<h2>AVAudioPlayer Simple Use</h2>

<pre><code class="objective-c">- (AVAudioPlayer *)startAudioPlayer {
  if (!_startAudioPlayer) {
    NSString *path = [NSString stringWithFormat:@"%@/startAudio.wav", [[NSBundle mainBundle] resourcePath]];
    NSURL *soundURL = [NSURL fileURLWithPath:path];
    NSError *error = nil;
    _startAudioPlayer = [[AVAudioPlayer alloc] initWithContentsOfURL:soundURL error:&amp;error];
    if (error) {
      DDLogDebug(@"Can't find audio file %@", error.localizedDescription);
    }
  }
  return _startAudioPlayer;
}
</code></pre>

<pre><code class="objective-c">  [self.startAudioPlayer play];
  [self.startAudioPlayer pause];
</code></pre>

<h2>模糊效果</h2>

<h3>UIBlurEffect</h3>

<p>可以选择模糊亮度，但无法自定义模糊半径。</p>

<pre><code class="objective-c">  UIBlurEffect *blurEffect = [UIBlurEffect effectWithStyle:UIBlurEffectStyleLight];
  UIVisualEffectView *blurView = [[UIVisualEffectView alloc] initWithEffect:blurEffect];
  blurView.frame = myView.bounds;
  [myView addSubview:blurView];
</code></pre>

<h3>CIImage &amp; CIFilter</h3>

<p>可以选择滤波算法，并设置滤波参数。</p>

<pre><code class="objective-c">- (UIImage *)convertToBlurImage:(UIImage *)image {
  //  create input image
  CIImage *inputImage = [CIImage imageWithCGImage:[image CGImage]];
  //  create filter
  CIFilter *gaussianBlurFilter = [CIFilter filterWithName:@"CIGaussianBlur"];
  //  set filter parameters
  [gaussianBlurFilter setDefaults];
  [gaussianBlurFilter setValue:inputImage forKey:kCIInputImageKey];
  [gaussianBlurFilter setValue:@6 forKey:kCIInputRadiusKey];
  //  create output image
  CIImage *outputImage = [gaussianBlurFilter outputImage];
  CIContext *context = [CIContext contextWithOptions:nil];
  CGImageRef cgimg = [context createCGImage:outputImage fromRect:[inputImage extent]];
  //  get UIImage
  UIImage *convertedImage = [UIImage imageWithCGImage:cgimg];
  return convertedImage;
}
</code></pre>

<h2>UIView to UIImage</h2>

<pre><code class="objective-c">- (UIImage *)imageFromUIView:(UIView *)view {
  UIGraphicsBeginImageContextWithOptions(view.bounds.size, YES, 0.0);
  //  render view in context
  [view.layer renderInContext:UIGraphicsGetCurrentContext()];
  //  get image from context
  UIImage *image = UIGraphicsGetImageFromCurrentImageContext();
  UIGraphicsEndImageContext();
  return image;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS知识小集-171016]]></title>
    <link href="http://sxgfxm.github.io/blog/2017/10/17/ioszhi-shi-xiao-ji-171016/"/>
    <updated>2017-10-17T19:06:22+08:00</updated>
    <id>http://sxgfxm.github.io/blog/2017/10/17/ioszhi-shi-xiao-ji-171016</id>
    <content type="html"><![CDATA[<h2>Clear iOS DeviceSupport to free disk storage</h2>

<p>真机调试时，不同系统的手机会生成不同的Device Support文件，每个大概3GB左右，占用大量磁盘空间。删除不需要的Device Support文件，可以释放大量磁盘空间。
iOS DeviceSupport 目录路径<code>[User]/Library/Developer/Xcode/iOS DeviceSupport</code></p>

<h2>Compute CKComponent size</h2>

<p>获取component的size。</p>

<pre><code class="objective-c">  #import &lt;ComponentKit/CKComponentSubclass.h&gt;

  - (CGSize)sizeOfComponent:(CKComponent*)component{
    return [component computeLayoutThatFits: CKSizeRange()].size;
  }
</code></pre>

<!-- more -->


<h2>CKComponentRootView</h2>

<p>获取component对应的根视图，在CKComponentController中可以自定义根视图。</p>

<pre><code class="objective-c">  CKComponentRootView *rootView = component.viewContext.view;
</code></pre>

<h2>CKComponentController</h2>

<ol>
<li>命名必须为<strong>ComponentName+Controller</strong>，继承至CKComponentController；</li>
<li>Component必须添加<strong>Scope</strong>，<code>CKComponentScope scope(self, model)</code>；</li>
<li>ComponentController可以监控component的生命周期，进行设置；</li>
<li><code>-didMount</code>，已经加载完成，包括所有的子component；</li>
<li><code>-willUpdateComponent</code>，component即将更新时调用；</li>
<li><code>-willRemount</code>，component正在update或root component被关联到其他root view时调用；</li>
<li><code>-componentTreeWillAppear</code>，当调用<code>-willDisplayCell:for{Row|Item}AtIndexPath:</code>时调用；</li>
</ol>


<h2><a href="https://github.com/lefex/TCZLocalizableTool">TCZLocalizableTool</a></h2>

<p>通过Python脚本检查本地化文件中语法错误。</p>

<h2>Horizontal ScrollComponent of CKComponent</h2>

<p>Add a horizontal UIScrollView to a vertical UICollectionView by ComponentKit.</p>

<ol>
<li>Create a <strong>CKStackLayoutComponent</strong> component and set [<strong>UIScrollView</strong> class] in block newWithView;</li>
<li>In <code>-didMount</code>, get the scroll view and set its <code>contentSize</code>;</li>
<li>In <code>-didUpdateComponent</code>, update its <code>contentSize</code> if the component has changed.</li>
</ol>


<p>.h</p>

<pre><code>#import &lt;ComponentKit/ComponentKit.h&gt;

@interface XGHorizontalScrollComponent : CKCompositeComponent

+ (instancetype)newWithChildren:(std::vector&lt;CKStackLayoutComponentChild&gt;)children;

@end

@interface XGHorizontalScrollComponentController : CKComponentController

@end
</code></pre>

<p>.mm</p>

<pre><code>#import "XGHorizontalScrollComponent.h"
#import &lt;ComponentKit/CKComponentSubclass.h&gt;

@interface XGHorizontalScrollComponent()

@property(nonatomic, strong) CKComponent *scrollComponent;

@end

@implementation XGHorizontalScrollComponent

+ (instancetype)newWithChildren:(std::vector&lt;CKStackLayoutComponentChild&gt;)children{
  CKComponentScope scope(self);
  CKComponent *content = [CKStackLayoutComponent
                          newWithView:{
                            [UIScrollView class]
                          }
                          size:{}
                          style:{
                            .direction = CKStackLayoutDirectionHorizontal,
                            .alignItems = CKStackLayoutAlignItemsStretch
                          }
                          children:{children}];
  XGHorizontalScrollComponent *component = [super newWithComponent:content];
  if (component) {
    component-&gt;_scrollComponent = content;
  }
  return component;
}

@end

@implementation XGHorizontalScrollComponentController

- (void)didMount {
  [super didMount];
  //  Get scroll component
  XGHorizontalScrollComponent *component = (XGHorizontalScrollComponent*)self.component;
  CKComponent *scrollComponent = component.scrollComponent;
  //  Get component size
  CKSizeRange range = CKSizeRange();
  CKComponentLayout layout = [scrollComponent computeLayoutThatFits:range];
  //  Get scroll view
  UIScrollView *scrollView = (UIScrollView *)scrollComponent.viewContext.view;
  //  Set scroll view properties, you can custom scrollView here
  scrollView.showsHorizontalScrollIndicator = NO;
  scrollView.showsVerticalScrollIndicator = NO;
  //  Set contentSize
  [scrollView setContentSize:layout.size];
}

//  Invoked when the component is updated
-(void)didUpdateComponent{
  [super didUpdateComponent];
  //  Update contentSize
  XGHorizontalScrollComponent *component = (XGHorizontalScrollComponent*)self.component;
  CKComponent *scrollComponent = component.scrollComponent;
  CKSizeRange range = CKSizeRange();
  CKComponentLayout layout = [scrollComponent computeLayoutThatFits:range];
  UIScrollView *scrollView = (UIScrollView *)scrollComponent.viewContext.view;
  [scrollView setContentSize:layout.size];
}

@end
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS知识小集-171009]]></title>
    <link href="http://sxgfxm.github.io/blog/2017/10/13/ioszhi-shi-xiao-ji-171009/"/>
    <updated>2017-10-13T17:04:25+08:00</updated>
    <id>http://sxgfxm.github.io/blog/2017/10/13/ioszhi-shi-xiao-ji-171009</id>
    <content type="html"><![CDATA[<h2>NSInteger to NSData</h2>

<pre><code class="objective-c">  -(NSData*)dataWithInteger:(NSInteger)integer{
    return [NSData dataWithBytes:&amp;integer length:sizeof(integer)];
  }
</code></pre>

<h2>UICollectionView contentInset</h2>

<p>设置内容距离上下左右的间距。</p>

<!-- more -->


<h2>Snapshot CKComponent</h2>

<pre><code class="objective-c">#import "CKComponentSnapshotTestCase.h"

#import &lt;ComponentKitTestHelpers/CKComponentLifecycleTestHelper.h&gt;

const CKComponentLayout componentLayout = [component layoutThatFits:sizeRange parentSize:sizeRange.max];
CKComponentLifecycleTestHelper *componentLifecycleTestController = [[CKComponentLifecycleTestHelper alloc] initWithComponentProvider:nil sizeRangeProvider:nil];
[componentLifecycleTestController updateWithState:(CKComponentLifecycleTestHelperState){
  .componentLayout = componentLayout
}];
UIView *view = [[UIView alloc] initWithFrame:{0,0, componentLayout.size.width, componentLayout.size.height}];
[componentLifecycleTestController attachToView:view];
</code></pre>

<pre><code class="objective-c">- (UIImage *)_imageForViewOrLayer:(id)viewOrLayer
{
  if ([viewOrLayer isKindOfClass:[UIView class]]) {
    if (_usesDrawViewHierarchyInRect) {
      return [UIImage fb_imageForView:viewOrLayer];
    } else {
      return [UIImage fb_imageForViewLayer:viewOrLayer];
    }
  } else if ([viewOrLayer isKindOfClass:[CALayer class]]) {
    return [UIImage fb_imageForLayer:viewOrLayer];
  } else {
    [NSException raise:@"Only UIView and CALayer classes can be snapshotted" format:@"%@", viewOrLayer];
  }
  return nil;
}
</code></pre>

<pre><code class="objective-c">+ (UIImage *)fb_imageForView:(UIView *)view
{
  CGRect bounds = view.bounds;
  NSAssert1(CGRectGetWidth(bounds), @"Zero width for view %@", view);
  NSAssert1(CGRectGetHeight(bounds), @"Zero height for view %@", view);

  // If the input view is already a UIWindow, then just use that. Otherwise wrap in a window.
  UIWindow *window = [view isKindOfClass:[UIWindow class]] ? (UIWindow *)view : view.window;
  BOOL removeFromSuperview = NO;
  if (!window) {
    window = [[UIApplication sharedApplication] fb_strictKeyWindow];
  }

  if (!view.window &amp;&amp; view != window) {
    [window addSubview:view];
    removeFromSuperview = YES;
  }

  UIGraphicsBeginImageContextWithOptions(bounds.size, NO, 0);
  [view layoutIfNeeded];
  [view drawViewHierarchyInRect:view.bounds afterScreenUpdates:YES];

  UIImage *snapshot = UIGraphicsGetImageFromCurrentImageContext();
  UIGraphicsEndImageContext();

  if (removeFromSuperview) {
    [view removeFromSuperview];
  }

  return snapshot;
}
</code></pre>

<h2>Border &amp;&amp; Shadow</h2>

<p>圆角可以和Border并存，Border属于bounds里面，不会被剪切掉；
圆角不能和Shadow并存，<code>maskToBounds</code>会剪切掉Shadow；</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS知识小集-170925]]></title>
    <link href="http://sxgfxm.github.io/blog/2017/09/29/ioszhi-shi-xiao-ji-170925/"/>
    <updated>2017-09-29T17:49:31+08:00</updated>
    <id>http://sxgfxm.github.io/blog/2017/09/29/ioszhi-shi-xiao-ji-170925</id>
    <content type="html"><![CDATA[<h2>URL encode</h2>

<p>string -> url，特殊字符需要编码。
<code>objective-c
- (NSString *)urlEncode:(NSString *)string {
  NSCharacterSet *set = [NSCharacterSet characterSetWithCharactersInString:@";/?:@=&amp;&lt;&gt;\"#%{}|\\^~[]` ()"].invertedSet;
  return [string stringByAddingPercentEncodingWithAllowedCharacters:set];
}
</code></p>

<!-- more -->


<h2>Git fetch remote branch</h2>

<pre><code>  git fetch
  git checkout -b localBanchName remoteBranchName
  git branch -vv
</code></pre>

<h2>NSNumberFormatter</h2>

<pre><code class="objective-c">  NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
  formatter.numberStyle = NSNumberFormatterPercentStyle;
  NSNumber *number = [formatter numberFromString:index];
</code></pre>

<h2>layoutSubviews</h2>

<p>当frame改变时调用</p>

<h2>AVAudioSession</h2>

<p>The session&rsquo;s category and mode together define how the application intends to use audio.</p>

<h2>AVAudioSessionCategory</h2>

<p>Each app running in iOS has a single audio session, which in turn has a single category. You can change your audio session’s category while your app is running.</p>

<p><strong>AVAudioSessionCategoryAmbient</strong>：可以与其他app混合，锁屏停止播放，受静音键控制。<br/>
<strong>AVAudioSessionCategorySoloAmbient</strong>：默认设置，不可以与其他app混合，锁屏停止播放，受静音键控制。<br/>
<strong>AVAudioSessionCategoryPlayback</strong>：混合其他app需要设置，后台播放需要设置，锁屏继续播放，不受静音键控制。<br/>
<strong>AVAudioSessionCategoryRecord</strong>：用于录音，会打断音频播放，后台录音需要设置，且需要申请录音权限。<br/>
<strong>AVAudioSessionCategoryPlayAndRecord</strong>：既可以录音也可以播放，混合其他app需要设置。<br/>
<strong>AVAudioSessionCategoryMultiRoute</strong>：既可以录音也可以播放，用于多路输出。</p>

<h2>AVAudioSessionCategoryOptions</h2>

<p>Constants that specify optional audio behaviors. Each option is valid only with specific audio session categories.<br/>
options需要配合category使用。</p>

<p><strong>AVAudioSessionCategoryOptionMixWithOthers</strong>：允许与其他active session混合。<br/>
<strong>AVAudioSessionCategoryOptionDuckOthers</strong>：使其他audio session声音减弱。<br/>
<strong>AVAudioSessionCategoryOptionAllowBluetooth</strong>：使蓝牙设备可作为音频输入设备。<br/>
<strong>AVAudioSessionCategoryOptionDefaultToSpeaker</strong>：在没有其他输出设备时，通过手机扬声器播放音频，否则通过听筒播放。<br/>
<strong>AVAudioSessionCategoryOptionInterruptSpokenAudioAndMixWithOthers</strong>：会暂停其他音乐播放，适用于指引类app。<br/>
<strong>AVAudioSessionCategoryOptionAllowAirPlay</strong>：允许AirPlay播放。<br/>
<strong>AVAudioSessionCategoryOptionAllowBluetoothA2DP</strong>：允许蓝牙播放。</p>

<p>语音识别界面：可录音，可播放，不受静音键控制；可混合；扬声器发声；可蓝牙播放；可后台播放。</p>

<h2><a href="https://github.com/ReactiveCocoa/ReactiveCocoa">ReactiveCocoa</a></h2>

<p>ReactiveCocoa is an open source library that brings Functional Reactive Programming paradigm to Objective-C.<br/>
Functional Reactive Programming (FRP) is a way of thinking about software in terms of transforming inputs to produce output continuously over time.</p>

<p>ReactiveCocoa is comprised of two major components: signals (<strong>RACSignal</strong>) and sequences (<strong>RACSequence</strong>).
Both signals and sequences are kinds of streams, sharing many of the same operators. Signals are a push-driven stream, and sequences are a pull-driven stream.</p>

<h3>RACSignal</h3>

<ol>
<li>Handling Asynchronous Or Event-driven Data Sources.</li>
<li>Chaining Dependent Operations.</li>
<li>Parallelizing Independent Work.</li>
</ol>


<p>Events signals send:<br/>
1. The <strong>next</strong> event provides a new value from the stream.
2. The <strong>error</strong> event indicates that an error occurred before the signal could finish.
3. The <strong>completed</strong> event indicates that the signal finished successfully, and that no more values will be added to the stream.</p>

<h3>RACSequence</h3>

<p>Simplifying Collection Transformations.<br/>
The values in a sequence are evaluated lazily (i.e., only when they are needed) by default.<br/>
Just like Cocoa collections, sequences cannot contain nil.</p>

<h3>RAC vs. KVO</h3>

<p>KVO is neither pleasant nor easy to use: its API is overwrought with unused parameters and sorely lacking a blocks-based interface.</p>

<h3>RAC vs. Bindings</h3>

<p>RAC offers a clear, understandable, and extensible code-based API that works in iOS and is apt to replace all but the most trivial uses of bindings in your OS X application.</p>

<h2><a href="https://github.com/ReactiveCocoa/ReactiveObjC">ReactiveObjC</a></h2>

<p>ReactiveObjC(RAC) is an Objective-C framework inspired by <a href="https://en.wikipedia.org/wiki/Functional_reactive_programming">Functional Reactive Programming</a>.<br/>
It provides APIs for <strong>composing and transforming streams of values. </strong><br/>
ReactiveObjC supports OS X 10.8+ and <strong>iOS 8.0+</strong>.</p>

<h3>Features:</h3>

<ol>
<li>RAC provides <strong>signals</strong> (represented by <strong>RACSigal</strong>) that capture present and future values.</li>
<li>RAC provides <strong>unified approach</strong> to dealing with asynchronous behaviors.</li>
<li>Signals can be <strong>chained together</strong> and operated on.</li>
<li>Signals can be used to <strong>derive state</strong>.</li>
<li>Signals can be built on <strong>any stream of values</strong> over time.</li>
<li>Signals can also represent timers, other UI events, or anything else that <strong>changes over time</strong>.</li>
<li>Signals can be chained to <strong>sequentially execute asynchronous operations</strong>, instead of nesting callbacks with blocks.</li>
<li>RAC even makes it easy to <strong>bind</strong> to the result of an asynchronous operation.</li>
</ol>


<h3>When to use ReactiveObjC</h3>

<ol>
<li>Handling asynchronous or event-driven data sources.</li>
<li>Chaining dependent operations.</li>
<li>Parallelizing independent work.</li>
<li>Simplifying collection transformations.</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS知识小集-170918]]></title>
    <link href="http://sxgfxm.github.io/blog/2017/09/22/ioszhi-shi-xiao-ji-170918/"/>
    <updated>2017-09-22T10:50:20+08:00</updated>
    <id>http://sxgfxm.github.io/blog/2017/09/22/ioszhi-shi-xiao-ji-170918</id>
    <content type="html"><![CDATA[<h2>UIButton Gestures</h2>

<p><code>UIControlEventTouchDown</code>：按下button；<br/>
<code>UIControlEventTouchDragExit</code>：拖动至button范围（button四周有一定范围）外；<br/>
<code>UIControlEventTouchDragEnter</code>：拖动至button范围（button四周有一定范围）内。<br/>
<code>UIControlEventTouchUpInside</code>：在button内松手；<br/>
<code>UIControlEventTouchUpOutside</code>：在button外松手；<br/>
<code>UIControlEventTouchDragOutside</code>：在button外拖动。<br/>
<code>UIControlEventTouchDragInside</code>：在button内拖动；<br/>
<code>UIControlEventTouchCancel</code>：系统行为取消touch；</p>

<!-- more -->


<h2>UIGraphics Image Context</h2>

<p>参考<a href="https://onevcat.com/2013/04/using-blending-in-ios/">这篇文章</a>。</p>

<p>关于blend mode参数解释：  <br/>
<code>
R is the premultiplied result
S is the source color, and includes alpha
D is the destination color, and includes alpha
Ra, Sa, and Da are the alpha components of R, S, and D
</code></p>

<pre><code class="objective-c">//  UIImage+Tint.m

#import "UIImage+Tint.h"

@implementation UIImage (Tint)
- (UIImage *) imageWithTintColor:(UIColor *)tintColor
{
    return [self imageWithTintColor:tintColor blendMode:kCGBlendModeDestinationIn];
}

- (UIImage *) imageWithGradientTintColor:(UIColor *)tintColor
{
    return [self imageWithTintColor:tintColor blendMode:kCGBlendModeOverlay];
}

- (UIImage *) imageWithTintColor:(UIColor *)tintColor blendMode:(CGBlendMode)blendMode
{
    //We want to keep alpha, set opaque to NO; Use 0.0f for scale to use the scale factor of the device’s main screen.
    UIGraphicsBeginImageContextWithOptions(self.size, NO, 0.0f);
    [tintColor setFill];
    CGRect bounds = CGRectMake(0, 0, self.size.width, self.size.height);
    UIRectFill(bounds);

    //Draw the tinted image in context
    [self drawInRect:bounds blendMode:blendMode alpha:1.0f];

    if (blendMode != kCGBlendModeDestinationIn) {
        [self drawInRect:bounds blendMode:kCGBlendModeDestinationIn alpha:1.0f];
    }

    UIImage *tintedImage = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return tintedImage;
}

@end
</code></pre>

<h2>正五边形</h2>

<p>绘制正五边形步骤：</p>

<ol>
<li>初始化数据；</li>
<li>计算各个顶点坐标，18° + 54° = 72°，通过三角函数计算；</li>
<li>使用UIBezierPath绘制五边形path，使用CAShapeLayer渲染五边形；</li>
</ol>


<p>注：可使用matrix优化缩放。</p>

<h2>返回手势</h2>

<ol>
<li>如果无leftBarButtonItem，点击返回及右滑返回均系统支持；</li>
<li>如果有leftBarButtonItem，点击返回逻辑需自己添加，右滑返回默认不支持。如果想支持右滑返回，需要设置<code>navigationController.interactivePopGestureRecognizer.delegate</code>，并实现<code>-gestureRecognizerShouldBegin</code>代理方法。注意右滑时需要判断当前栈中是否有足够的viewController以供pop。</li>
</ol>


<h2>View与View的参数分离</h2>

<p>自定义view时，将参数与view本身分离，并用常量定义参数，节省代码量，且易于统一修改处理。</p>

<h2>UIWebView</h2>

<p>如果webView加载的内容被卡住，<code>[self.webView canGoBack]</code>不能立即返回，如果使用该方法判断是否可以pop页面，可能会造成卡顿。</p>
]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ios | Light's Blog]]></title>
  <link href="http://sxgfxm.github.io/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://sxgfxm.github.io/"/>
  <updated>2017-09-19T20:16:34+08:00</updated>
  <id>http://sxgfxm.github.io/</id>
  <author>
    <name><![CDATA[Light]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOS知识小集-170911]]></title>
    <link href="http://sxgfxm.github.io/blog/2017/09/15/ioszhi-shi-xiao-ji-170911/"/>
    <updated>2017-09-15T17:20:49+08:00</updated>
    <id>http://sxgfxm.github.io/blog/2017/09/15/ioszhi-shi-xiao-ji-170911</id>
    <content type="html"><![CDATA[<h2>长按语音控制</h2>

<pre><code>-(void)setupBtn{
  //  按下按钮
  [self.voiceBtn addTarget:self action:@selector(btnTouchBegin:) forControlEvents:UIControlEventTouchDown];
  //  立刻松开
  [self.voiceBtn addTarget:self action:@selector(btnTouchEnd:) forControlEvents:UIControlEventTouchUpInside];
  //  上划取消
  [self.voiceBtn addTarget:self action:@selector(cancelSpeak) forControlEvents:UIControlEventTouchDragExit];
  //  外部松开
  [self.voiceBtn addTarget:self action:@selector(btnTouchEnd:) forControlEvents:UIControlEventTouchUpOutside];
}

//  通过计时器区分“点击”还是“长按”
- (void)btnTouchBegin:(UIButton *)button {
  self.countNum = 0.0f;
  self.timer =
      [NSTimer scheduledTimerWithTimeInterval:0.1 target:self selector:@selector(handleTimer) userInfo:nil repeats:YES];
  [self.timer fire];
}

- (void)btnTouchEnd:(UIButton *)button {
  [self.timer invalidate];

  if ([self isLongPressGesture]) {
    //  执行长按操作
  } else {
    //  执行点击操作
  }
}

// 处理时间
- (void)handleTimer {
  self.countNum += 0.1;

  if ([self isLongPressGesture]) {
    [self.timer invalidate];
    [self longPressVoiceBegin];
  }
}

// 判断是否为长按手势
- (BOOL)isLongPressGesture {
  return self.countNum &gt;= 0.5;
}

// 上划取消语音输入
- (void)cancelSpeak {
  [self voiceEnd];
}  
</code></pre>

<!-- more -->


<h2>长按手势控制</h2>

<p>添加长按手势</p>

<pre><code>- (void)addLongPressGesture{
  UILongPressGestureRecognizer *longPressGesture = [[UILongPressGestureRecognizer alloc] initWithTarget:self action:@selector(longPressGestureAction:)];
  [self.voiceBtn addGestureRecognizer:longPressGesture];
}
</code></pre>

<p>处理长按手势</p>

<pre><code class="objective-c">- (void)longPressGestureAction:(UILongPressGestureRecognizer *)longPress {
  CGPoint point = [longPress locationInView:self.voiceBtn];
  switch (longPress.state) {
    case UIGestureRecognizerStateBegan:
      //  长按手势开始
      break;
    case UIGestureRecognizerStateChanged:
      //  长按滑动
      break;
    case UIGestureRecognizerStateEnded:
      //  长按手势结束
      break;
    default:
      break;
  }
}

//  判断触点是否在特定区域内
- (BOOL)isInViewAreaWithTouchPoint:(CGPoint)touchPoint {
  return touchPoint.y &gt; 0;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS知识小集-170904]]></title>
    <link href="http://sxgfxm.github.io/blog/2017/09/15/ioszhi-shi-xiao-ji-170904/"/>
    <updated>2017-09-15T17:19:17+08:00</updated>
    <id>http://sxgfxm.github.io/blog/2017/09/15/ioszhi-shi-xiao-ji-170904</id>
    <content type="html"><![CDATA[<h2>Git Delete Branch</h2>

<pre><code>git branch -a
git branch -d &lt;branch_name&gt;
git branch -D &lt;branch_name&gt; // force delete
</code></pre>

<!-- more -->


<h2>MVC</h2>

<h2>&lt;> &amp; &ldquo;&rdquo;</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS知识小集-170828]]></title>
    <link href="http://sxgfxm.github.io/blog/2017/09/04/ioszhi-shi-xiao-ji-170828/"/>
    <updated>2017-09-04T14:12:44+08:00</updated>
    <id>http://sxgfxm.github.io/blog/2017/09/04/ioszhi-shi-xiao-ji-170828</id>
    <content type="html"><![CDATA[<h2>TableView Header / Footer Height</h2>

<p>UITableView默认有section header/footer高度，设为0无效，最小可设为1。</p>

<h2>CNContactPickerViewController</h2>

<pre><code>-(void)pickContact{
  CNContactPickerViewController *controller = [[CNContactPickerViewController alloc] init];
  controller.delegate = self;
  [self presentViewController:controller animated:YES completion:nil];
}

- (void)contactPicker:(CNContactPickerViewController *)picker
    didSelectContactProperty:(CNContactProperty *)contactProperty {
  CNContact *contact = contactProperty.contact;
  NSString *name = [CNContactFormatter stringFromContact:contact style:CNContactFormatterStyleFullName];
  CNPhoneNumber *phoneValue = contactProperty.value;
  NSString *phoneNumber = phoneValue.stringValue;
  NSLog(@"%@--%@", name, phoneNumber);
}
</code></pre>

<!-- more -->


<h2>CNContactStore</h2>

<p>info.plist添加<code>Privacy - Contacts Usage Description</code>。</p>

<pre><code>- (void)checkAuthorization {
  NSLog(@"Contact - Check Authorization");
  //  status
  CNAuthorizationStatus status =
      [CNContactStore authorizationStatusForEntityType:CNEntityTypeContacts];
  //  check authorization
  if (status != CNAuthorizationStatusAuthorized) {
    NSLog(@"Contact - Not Authorized");
    //  request access
    CNContactStore *store = [CNContactStore new];
    NSLog(@"Contact - Request Authorization");
    [store
        requestAccessForEntityType:CNEntityTypeContacts
                 completionHandler:^(BOOL granted, NSError *_Nullable error) {
                   if (granted) {
                     //  YES
                     NSLog(@"Contact - Authorized");
                     [self fetchContact];
                   } else {
                     //  No
                     NSLog(@"Contact - Not Authorized");
                   }
                 }];
  } else {
    NSLog(@"Contact - Authorized");
    [self fetchContact];
  }
}

- (void)fetchContact {
  NSLog(@"Contact - Fetch Contact");
  //  keys
  NSArray *keys = @[
    CNContactPhoneNumbersKey,
    CNContactGivenNameKey,
    CNContactFamilyNameKey
  ];
  //  request
  CNContactFetchRequest *request =
      [[CNContactFetchRequest alloc] initWithKeysToFetch:keys];
  //  store
  NSError *error = nil;
  CNContactStore *store = [CNContactStore new];
  [store
      enumerateContactsWithFetchRequest:request
                                  error:&amp;error
                             usingBlock:^(CNContact *_Nonnull contact,
                                          BOOL *_Nonnull stop) {
                               //  contact
                               NSString *firstName = contact.familyName;
                               NSString *lastName = contact.givenName;
                               NSLog(@"%@ %@", firstName, lastName);
                               //  phone number
                               for (CNLabeledValue *labeledValue in contact
                                        .phoneNumbers) {
                                 CNPhoneNumber *phoneValue = labeledValue.value;
                                 NSString *phoneNumber = phoneValue.stringValue;
                                 NSString *label = [CNLabeledValue
                                     localizedStringForLabel:labeledValue
                                                                 .label];
                                 NSLog(@"%@ : %@", label, phoneNumber);
                               }
                               NSLog(@"");
                             }];
}
</code></pre>

<h2>iOS本地化</h2>

<ol>
<li>Project -> Localizations -> Add Chinese</li>
<li>New File -> Strings File</li>
<li>Strings File -> Utities -> Localization -> Add Chinese</li>
<li>Add Localized String</li>
</ol>


<h2>灯效说明</h2>

<p>继承</p>

<h2>智能家居控制</h2>

<p>分解</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS知识小集-170821]]></title>
    <link href="http://sxgfxm.github.io/blog/2017/08/28/ioszhi-shi-xiao-ji-170821/"/>
    <updated>2017-08-28T11:39:03+08:00</updated>
    <id>http://sxgfxm.github.io/blog/2017/08/28/ioszhi-shi-xiao-ji-170821</id>
    <content type="html"><![CDATA[<h2>ipa架构</h2>

<pre><code>IPA File
  Payload
    {appname}.app
      Application Binary
      Mobile Provision File
      Code Signature
      Bundled Resource File
  iTunesArtwork
  iTunesMetadata.plist
</code></pre>

<!-- more -->


<h2>Insecure Local Data Storage</h2>

<ol>
<li>PropertyList files</li>
<li>NSUserDefaults class</li>
<li>KeyChain</li>
<li>CoreData and SQLite databases</li>
</ol>


<h2>Apple Data Protection API</h2>

<ol>
<li>Complete Protection (NSFileProtectionComplete)</li>
<li>Protected Unless Open (NSFileProtectionCompleteUnlessOpen)</li>
<li>Protected Until First User Authentication (NSFileProtectionCompleteUntilFirstUserAuthentication)</li>
<li>No Protection (NSFileProtectionNone)</li>
</ol>


<h2>NSTimeZone</h2>

<pre><code>NSTimeZone *timeZone = [NSTimeZone localTimeZone];
//  Asia/Shanghai
NSString *name = timeZone.name;
//  GMT+8
NSString *abbreviation = timeZone.abbreviation;
</code></pre>

<h2>Prevent Buffer Overflows</h2>

<ol>
<li>Address Space Layout Randomization (ASLR)</li>
<li>Automatic Reference Counting (ARC)</li>
<li>Stack Protectors</li>
</ol>


<h2>System Call</h2>

<pre><code>-(void)makeCall:(NSString *)phone{
  NSString *phoneNumber = [@"telprompt://" stringByAppendingString:phone];
  [[UIApplication sharedApplication] openURL:[NSURL URLWithString:phoneNumber]];
}
</code></pre>

<h2>NSString to NSURL</h2>

<pre><code>NSString *encodeURL = [string stringByAddingPercentEncodingWithAllowedCharacters:[NSCharacterSet URLQueryAllowedCharacterSet]];
NSURL *url = [NSURL URLWithString:encodeURL];
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS知识小集-170814]]></title>
    <link href="http://sxgfxm.github.io/blog/2017/08/22/iosxiao-ji-170814/"/>
    <updated>2017-08-22T10:13:36+08:00</updated>
    <id>http://sxgfxm.github.io/blog/2017/08/22/iosxiao-ji-170814</id>
    <content type="html"><![CDATA[<h2>使用Xcode查看代码作者和提交信息</h2>

<p>切换为“Blame”和“Log”模式即可。</p>

<h2>AVAudioSession</h2>

<p>AVAudioSessionCategoryOptionDefaultToSpeaker：通过扬声器播放声音。<br/>
AVAudioSessionCategoryOptionMixWithOthers：不打断其他App音频播放。</p>

<h2>JSONModel</h2>

<p>下划线key转驼峰key。
<code>[JSONKeyMapper mapperFromUnderscoreCaseToCamelCase]</code>已废弃，
现在使用<code>[JSONKeyMapper mapperForSnakeCase]</code>。</p>

<h2>Acoustic Echo Cancellation</h2>

<p>Audio Unit回声消除。</p>
]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ios | Light's Blog]]></title>
  <link href="http://sxgfxm.github.io/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://sxgfxm.github.io/"/>
  <updated>2018-10-10T21:47:19+08:00</updated>
  <id>http://sxgfxm.github.io/</id>
  <author>
    <name><![CDATA[Light]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOS知识小集-180924]]></title>
    <link href="http://sxgfxm.github.io/blog/2018/10/10/ioszhi-shi-xiao-ji-180924/"/>
    <updated>2018-10-10T21:44:06+08:00</updated>
    <id>http://sxgfxm.github.io/blog/2018/10/10/ioszhi-shi-xiao-ji-180924</id>
    <content type="html"><![CDATA[<h2>修改UISearchBar取消按钮颜色</h2>

<pre><code class="objective-c">- (void)willPresentSearchController:(UISearchController *)searchController{
  [[UIBarButtonItem appearanceWhenContainedInInstancesOfClasses:@[[UISearchBar class]]] setTitleTextAttributes:@{NSForegroundColorAttributeName:UIColorFromRGBA(0xff4a4a4a)} forState:UIControlStateNormal];
}
</code></pre>

<h2>解决XCode10 引入非同一目录下头文件没有自动提示的问题</h2>

<p>Xcode &ndash;> File &ndash;> Workspace Settings &ndash;> Build System &ndash;> Legacy Build System。<br/>
需重新编译后生效。</p>

<h2>非 Retina 显示器，升级到 Mojave 之后发现文字不清晰问题</h2>

<p>如果你在用 “非 Retina” 的显示器，升级到 Mojave 之后发现文字不清晰了，是因为 Mojave 默认关闭了文字的次像素渲染，如果需要可以通过终端里输入这个命令重新打开：<br/>
<code>sudo defaults write -g CGFontRenderingFontSmoothingDisabled -bool NO</code>。<br/>
重新打开对应软件后生效。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS知识小集-180917]]></title>
    <link href="http://sxgfxm.github.io/blog/2018/09/25/ioszhi-shi-xiao-ji-180917/"/>
    <updated>2018-09-25T13:05:35+08:00</updated>
    <id>http://sxgfxm.github.io/blog/2018/09/25/ioszhi-shi-xiao-ji-180917</id>
    <content type="html"><![CDATA[<h2>相机拍摄图片方向调整</h2>

<pre><code class="objective-c">  if (image.imageOrientation != UIImageOrientationUp) {
      UIGraphicsBeginImageContext(image.size);
      [image drawInRect:CGRectMake(0, 0, image.size.width, image.size.height)];
      image = UIGraphicsGetImageFromCurrentImageContext();
      UIGraphicsEndImageContext();
  }
</code></pre>

<h2>Playground running 卡死</h2>

<p>1、修改platform为Mac OS；<br/>
2、修改为手动执行；<br/>
3、为手动执行增加快捷键；</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS知识小集-180910]]></title>
    <link href="http://sxgfxm.github.io/blog/2018/09/17/ioszhi-shi-xiao-ji-180910/"/>
    <updated>2018-09-17T20:42:43+08:00</updated>
    <id>http://sxgfxm.github.io/blog/2018/09/17/ioszhi-shi-xiao-ji-180910</id>
    <content type="html"><![CDATA[<h2>Siri Kit</h2>

<h3>Siri Kit作用</h3>

<p>通过语音完成第三方应用功能，偏向于工具型操作。</p>

<h3>实现机制</h3>

<p><strong>Domain</strong>：业务领域；<br/>
<strong>Intent</strong>：领域中的任务或指令；<br/>
语音识别 &ndash;> Domain / Intent &ndash;> 下发到已注册的Extension进行处理。<br/>
接近固定形式的表述更容易被识别。</p>

<h3>集成</h3>

<p>需要注意develop target系统版本问题。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS知识小集-180903]]></title>
    <link href="http://sxgfxm.github.io/blog/2018/09/10/ioszhi-shi-xiao-ji-180903/"/>
    <updated>2018-09-10T14:34:51+08:00</updated>
    <id>http://sxgfxm.github.io/blog/2018/09/10/ioszhi-shi-xiao-ji-180903</id>
    <content type="html"><![CDATA[<h2>集成Apple Pay</h2>

<h3>权限配置</h3>

<p>按官方指导配置权限。</p>

<h3>调用过程</h3>

<p>引入<code>&lt;PassKit/PassKit.h&gt;</code>，权限判断，支付卡判断，设置商品参数，创建支付请求，显示支付界面，代理接收结果。</p>

<!-- more -->


<pre><code class="objective-c">- (void)useApplePay{
  //  权限判断
  if ([PKPaymentAuthorizationViewController canMakePayments]){
    //  支付卡判断
    if ([PKPaymentAuthorizationViewController canMakePaymentsUsingNetworks:@[PKPaymentNetworkVisa, PKPaymentNetworkChinaUnionPay, PKPaymentNetworkDiscover]]){
      //  设置商品参数
      NSDecimalNumber *amount = [NSDecimalNumber decimalNumberWithString:@"2.33"]
      PKPaymentSummaryItem *item = [PKPaymentSummaryItem summaryItemWithLabel:@"PJChao" amount:amount];
      //  支付请求
      PKPaymentRequest *request = [[PKPaymentRequest alloc] init];
      // 设置商户ID（merchant IDs）
      request.merchantIdentifier = @"com.mobvoi.ApplePayTest";
      // 设置国家代码(中国大陆)
      request.countryCode = @"CN";
      // 设置支付货币(人民币)
      request.currencyCode = @"CNY";
      // 设置商户的支付标准(3DS支付方式必须支持，其他方式可选)
      request.merchantCapabilities = PKMerchantCapability3DS;
      request.paymentSummaryItems = @[item];
      /**
       *  以上参数都是必须的
       *  以下参数不是必须的
       */
      // 设置收据内容
      request.requiredBillingAddressFields = PKAddressFieldAll;
      // 设置送货内容
      request.requiredShippingAddressFields = PKAddressFieldAll;
      // 设置送货方式
      PKShippingMethod *method = [PKShippingMethod summaryItemWithLabel:@"顺丰" amount:[NSDecimalNumber decimalNumberWithString:@"10.00"]];
      method.identifier = @"顺丰物流";
      method.detail = @"12小时到达";
      request.shippingMethods = @[method];
      //  显示支付页面
      PKPaymentAuthorizationViewController *paymentVC = [[PKPaymentAuthorizationViewController alloc] initWithPaymentRequest:request];
      paymentVC.delegate = self;
      if (paymentVC == nil) return;
      [self presentViewController:paymentVC animated:YES completion:nil];
    } else {
      //  跳转至银行卡设置界面
      [[[PKPassLibrary alloc] init] openPaymentSetup];
    }
  }
}

//  代理方法
#pragma mark - PKPaymentAuthorizationViewControllerDelegate
- (void)paymentAuthorizationViewController:(PKPaymentAuthorizationViewController *)controller
                       didAuthorizePayment:(PKPayment *)payment
                                completion:(void (^)(PKPaymentAuthorizationStatus status))completion
{
    /**
     *  在这里支付信息应发送给服务器/第三方的SDK（银联SDK/易宝支付SDK/易智付SDK等）
     *  再根据服务器返回的支付成功与否进行不同处理
     *  这里直接返回支付成功
     */
    completion(PKPaymentAuthorizationStatusSuccess);
}

- (void)paymentAuthorizationViewControllerDidFinish:(PKPaymentAuthorizationViewController *)controller
{
    // 点击支付/取消按钮隐藏界面
    [controller dismissViewControllerAnimated:YES completion:nil];
}
</code></pre>

<h2>集成Touch ID</h2>

<pre><code class="objective-c">- (void)startLocalAuthentication{
  if (NSFoundationVersionNumber &lt; NSFoundationVersionNumber_iOS_8_0) {
    NSLog(@"系统版本不支持TouchID");
  } else {
    LAContext *context = [[LAContext alloc] init];
    context.localizedFallbackTitle = @"请输入密码";
    NSError *error = nil;
    if ([context canEvaluatePolicy:LAPolicyDeviceOwnerAuthenticationWithBiometrics error:&amp;error]) {
      [context evaluatePolicy:LAPolicyDeviceOwnerAuthenticationWithBiometrics localizedReason:@"通过指纹登录" reply:^(BOOL success, NSError * _Nullable error) {
        if (success) {
          dispatch_async(dispatch_get_main_queue(), ^{
            NSLog(@"验证成功");
          });
        } else {
          NSLog(@"验证失败");
        }
      }];
    } else {
      NSLog(@"当前设备不支持TouchID");
    }
  }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS知识小集-180827]]></title>
    <link href="http://sxgfxm.github.io/blog/2018/09/03/ioszhi-shi-xiao-ji-180827/"/>
    <updated>2018-09-03T11:36:54+08:00</updated>
    <id>http://sxgfxm.github.io/blog/2018/09/03/ioszhi-shi-xiao-ji-180827</id>
    <content type="html"><![CDATA[<h2>lldb</h2>

<h3>什么是lldb</h3>

<p>LLDB是个开源的内置于XCode的具有REPL(read-eval-print-loop)特征的Debugger，其可以安装C++或者Python插件。</p>

<!-- more -->


<h3>expression</h3>

<p>执行一个表达式，并将结果输出。</p>

<h4>expression</h4>

<p><code>expression -- self.view.backgroundColor = [UIColor redColor]</code>
<code>expression -- (void)[CATransaction flush]</code></p>

<h4>print、p、call</h4>

<p>expression的别名，常用与输出某个变量。</p>

<h4>po</h4>

<p>等价于<code>expression -O -- variable</code>，输出对象本身的信息，而非对象地址。</p>

<h3>thread</h3>

<p>与线程相关操作，可以查看调用栈信息，修改返回值。</p>

<h4>thread backtrace、bt</h4>

<p>打印当前线程的调用栈信息，可以设置打印帧数，从哪个帧开始打印，是否额外显示回溯。</p>

<h4>thread return</h4>

<p>修改某个函数的返回值。</p>

<h4>c、n、s、finish</h4>

<p>continue、next、step in、step out。</p>

<h3>breakpoint</h3>

<p>与断点相关操作，可以设置单个断点、批量设置断点、为断点增加命令，删除断点及断点命令。</p>

<h4>breakpoint set</h4>

<p>设置断点，可以指定<code>-n</code>方法名，<code>-f</code>文件名，<code>-l</code>行数，<code>-o</code>单次断点。</p>

<h4>breakpoint list</h4>

<p>查看断点。</p>

<h4>breakpoint disable/enable</h4>

<p>设置断点可用、不可用。</p>

<h4>breakpoint delete</h4>

<p>删除断点。</p>

<h4>breakpoint command add</h4>

<p>设置断点命令，可以指定<code>-o</code>单行命令，或多行命令。</p>

<h4>breakpoint command list</h4>

<p>查看断点命令。</p>

<h4>breakpoint command delete</h4>

<p>删除断点命令。</p>

<h3>watchpoint</h3>

<p>为地址设置断点。</p>

<h4>watchpoint set</h4>

<p>添加观察点，只可接受变量。</p>

<h4>watchpoint list</h4>

<p>查看观察点。</p>

<h4>breakpoint disable/enable</h4>

<p>设置观察点可用、不可用。</p>

<h4>watchpoint delete</h4>

<p>删除观察点。</p>

<h4>watchpoint command add</h4>

<p>设置观察点命令。</p>

<h4>watchpoint command list</h4>

<p>查看观察点命令。</p>

<h4>watchpoint command delete</h4>

<p>删除观察点命令。</p>

<h3>target</h3>

<p>查找地址对应代码位置。</p>

<h4>target modules lookup、image lookup</h4>

<p>查找地址对应代码位置。</p>

<h4>target stop-hook</h4>

<p>停止时执行代码。</p>

<h3>extension</h3>

<p><code>~/.lldbinit</code>中设置扩展。</p>

<h3>help</h3>

<p>查看命令帮助，如<code>help</code>，<code>apropos</code>。</p>

<h3>shortcut</h3>

<p>快捷键。<br/>
暂停/继续   cmd + ctrl + Y<br/>
断点失效/生效 cmd + Y<br/>
控制台显示/隐藏    cmd + shift + Y<br/>
光标切换到控制台    cmd + shift + C<br/>
清空控制台   cmd + K<br/>
step over   F6<br/>
step into   F7<br/>
step out    F8</p>

<h3>script</h3>

<p>执行Python脚本</p>
]]></content>
  </entry>
  
</feed>

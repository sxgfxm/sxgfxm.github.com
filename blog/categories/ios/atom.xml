<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ios | Light's Blog]]></title>
  <link href="http://sxgfxm.github.io/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://sxgfxm.github.io/"/>
  <updated>2018-07-16T10:22:50+08:00</updated>
  <id>http://sxgfxm.github.io/</id>
  <author>
    <name><![CDATA[Light]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOS知识小集-180619]]></title>
    <link href="http://sxgfxm.github.io/blog/2018/07/16/ioszhi-shi-xiao-ji-180619/"/>
    <updated>2018-07-16T10:20:28+08:00</updated>
    <id>http://sxgfxm.github.io/blog/2018/07/16/ioszhi-shi-xiao-ji-180619</id>
    <content type="html"><![CDATA[<h2>清除UIWebView JavaScript缓存</h2>

<pre><code class="objective-c">[webView stringByEvaluatingJavaScriptFromString:@"localStorage.clear();"];
</code></pre>

<h2>类似网易新闻下拉刷新后的展开动画</h2>

<p>修改<code>anchorPoint</code>为<code>(1, 0.5)</code>。 <br/>
<code>objective-c
- (void)spreadFromCenterAnimation{
  CGRect rectFrom = CGRectMake(kScreen_Width / 2, 300, 0, 60);
  CGRect rectTo = CGRectMake(0, 300, kScreen_Width, 60);
  self.testView = [[UIView alloc] initWithFrame:rectFrom];
  self.testView.backgroundColor = [UIColor blueColor];
  self.testView.layer.anchorPoint = CGPointMake(1, 0.5);
  [self.view addSubview:self.testView];
  [UIView animateWithDuration:1 animations:^{
    self.testView.frame = rectTo;
  } completion:^(BOOL finished) {
    self.testView.frame = rectFrom;
  }];
}
</code></p>

<!-- more -->


<h2>长按移动UITableViewCell</h2>

<pre><code class="objective-c">- (void)addLongPressGesture{
  UILongPressGestureRecognizer *longPress = [[UILongPressGestureRecognizer alloc] initWithTarget:self action:@selector(longPressGestureRecognized:)];
  [self.tableView addGestureRecognizer:longPress];
}

- (void)longPressGestureRecognized:(UILongPressGestureRecognizer*)longPress{
  //  关键点：通过长按手势获取点击位置，进而获取到对应的indexPath，从而操作对应的cell
  CGPoint location = [longPress locationInView:self.tableView];
  NSIndexPath *indexPath = [self.tableView indexPathForRowAtPoint:location];
  static UIView *snapshot = nil;
  static NSIndexPath *sourceIndexPath = nil;
  UIGestureRecognizerState state = longPress.state;
  switch (state) {
    case UIGestureRecognizerStateBegan:{
      if (indexPath) {
        //  移动开始时，截取对应的cell的snapshot，隐藏对应的cell
        sourceIndexPath = indexPath;
        UITableViewCell *cell = [self.tableView cellForRowAtIndexPath:indexPath];
        snapshot = [self customSnapshotFromView:cell];
        __block CGPoint center = cell.center;
        snapshot.center = center;
        snapshot.alpha = 0;
        [self.tableView addSubview:snapshot];
        [UIView animateWithDuration:0.25 animations:^{
          center.y = location.y;
          snapshot.center = center;
          snapshot.transform = CGAffineTransformMakeScale(1.05, 1.05);
          snapshot.alpha = 0.98;
          cell.alpha = 0;
          cell.hidden = YES;
        }];
      }
      break;
    }
    case UIGestureRecognizerStateChanged:{
      //  移动时，不断修改snapshot的位置，并交换数据和cell
      CGPoint center = snapshot.center;
      center.y = location.y;
      snapshot.center = center;
      if (indexPath &amp;&amp; ![indexPath isEqual:sourceIndexPath]) {
        [self.dataSource exchangeObjectAtIndex:indexPath.row withObjectAtIndex:sourceIndexPath.row];
        [self.tableView moveRowAtIndexPath:sourceIndexPath toIndexPath:indexPath];
        sourceIndexPath = indexPath;
      }
      break;
    }
    default:{
      //  移动完成后，显示被移动的cell，移除snapshot
      UITableViewCell *cell = [self.tableView cellForRowAtIndexPath:sourceIndexPath];
      cell.alpha = 0;
      [UIView animateWithDuration:0.25 animations:^{
        snapshot.center = cell.center;
        snapshot.transform = CGAffineTransformIdentity;
        snapshot.alpha = 0.0;
        cell.alpha = 1.0;
      } completion:^(BOOL finished) {
        cell.hidden = NO;
        sourceIndexPath = nil;
        [snapshot removeFromSuperview];
        snapshot = nil;
      }];
      break;
    }
  }
}

- (UIView *)customSnapshotFromView:(UIView *)inputView {
  // Make an image from the input view.
  UIGraphicsBeginImageContextWithOptions(inputView.bounds.size, NO, 0);
  [inputView.layer renderInContext:UIGraphicsGetCurrentContext()];
  UIImage *image = UIGraphicsGetImageFromCurrentImageContext();
  UIGraphicsEndImageContext();
  // Create an image view.
  UIView *snapshot = [[UIImageView alloc] initWithImage:image];
  snapshot.layer.masksToBounds = NO;
  snapshot.layer.cornerRadius = 0.0;
  snapshot.layer.shadowOffset = CGSizeMake(-5.0, 0.0);
  snapshot.layer.shadowRadius = 5.0;
  snapshot.layer.shadowOpacity = 0.4;
  return snapshot;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS知识小集-180522]]></title>
    <link href="http://sxgfxm.github.io/blog/2018/06/19/ioszhi-shi-xiao-ji-180619/"/>
    <updated>2018-06-19T17:49:55+08:00</updated>
    <id>http://sxgfxm.github.io/blog/2018/06/19/ioszhi-shi-xiao-ji-180619</id>
    <content type="html"><![CDATA[<h2>UITextView关闭输入修正</h2>

<p><code>textView.autocorrectionType = UITextAutocorrectionTypeNo</code>
<code>textFiled.autocorrectionType = UITextAutocorrectionTypeNo</code></p>

<h2>NSDateFormatter</h2>

<p>&ldquo;yyyy-MM-dd HH:mm:ss&rdquo;</p>

<h2>UIGraphicsBeginImageContextWithOptions</h2>

<p>传入<code>opaque</code>参数值为<code>NO</code>时可以创建透明的图层。</p>

<h2>load方法、initialize方法</h2>

<p><a href="https://www.jianshu.com/p/872447c6dc3f">https://www.jianshu.com/p/872447c6dc3f</a></p>

<!-- more -->


<h2>UIFont to CFTypeRef</h2>

<p><code>CGFontRef cgFont = CGFontCreateWithFontName((CFStringRef)uiFont.fontName);</code></p>

<h2>fsCachedData</h2>

<p>在查看Cache文件夹下缓存时，发现fsCachedData文件夹过大，便查了下这个文件夹是如何生成的。</p>

<p>在使用NSURLSession进行网络请求时可以设置缓存策略，可以参考<a href="https://www.cnblogs.com/ludashi/p/5556088.html">iOS开发之Alamofire源码解析前奏&ndash;NSURLSession全家桶</a>。当设置缓存策略后，会在默认为"~/Library/Caches/[Boundle ID]/fsCachedData/&ldquo;的目录下生成缓存文件。</p>

<h2>CADisplayLink</h2>

<h3>什么是CADisplayLink</h3>

<p><code>CADisplayLink</code>是一个定时器，其调用周期和屏幕刷新频率有关。每秒调用频率 = 60 / frameInterval。</p>

<h3>适用范围</h3>

<p>检测fps，绘制动画。</p>

<h3>与NSTimer区别</h3>

<p><code>NSTimer</code>调用周期更加灵活，适用范围更广，但准确性不如<code>CADisplayLink</code>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS知识小集-180514]]></title>
    <link href="http://sxgfxm.github.io/blog/2018/05/22/ioszhi-shi-xiao-ji-180514/"/>
    <updated>2018-05-22T11:52:58+08:00</updated>
    <id>http://sxgfxm.github.io/blog/2018/05/22/ioszhi-shi-xiao-ji-180514</id>
    <content type="html"><![CDATA[<h2>GradientButton</h2>

<p>创建渐变背景颜色的Button，如果直接添加CAGradientLayer，会覆盖Button的Image，所以需要创建一张渐变颜色的图片设置为Button的backgroundImage。</p>

<h2>UICollectionViewCell Select Effect</h2>

<p>为UICollectionViewCell添加选中效果。<br/>
方法一：<br/>
重写Cell的<code>-setSelected:</code>方法，在这个方法中增加动画效果。<br/>
The selected state is toggled when the user lifts up from a highlighted cell.
Override these methods to provide custom UI for a selected or highlighted state.<br/>
方法二：<br/>
在CollectionView回调方法<code>-collectionView:didHighlightItemAtIndexPath:</code>和<code>-collectionView:didUnhighlightItemAtIndexPath:</code>中添加动画效果。<br/>
方法三：<br/>
为CollectionViewCell添加<code>-performSelectAnimation</code>方法展示选中的动画效果，当<code>-collectionView:didSelectItemAtIndexPath:</code>时调用该方法。</p>

<!-- more -->


<h2>绘制渐变颜色图片</h2>

<pre><code class="objective-c">- (UIImage *)gradientImageFromColors:(NSArray *)colors startPoint:(CGPoint)startPoint endPoint:(CGPoint)endPoint frame:(CGRect)frame{
  NSMutableArray *mutColors = [NSMutableArray array];
  for (UIColor *color in colors) {
    [mutColors addObject:(id)color.CGColor];
  }
  UIGraphicsBeginImageContextWithOptions(frame.size, YES, 1);
  CGContextRef context = UIGraphicsGetCurrentContext();
  CGContextSaveGState(context);
  CGColorSpaceRef colorSpace = CGColorGetColorSpace([[colors lastObject] CGColor]);
  CGGradientRef gradient = CGGradientCreateWithColors(colorSpace, (CFArrayRef)mutColors, NULL);
  CGPoint start = startPoint;
  CGPoint end = endPoint;
  CGContextDrawLinearGradient(context, gradient, start, end,
                              kCGGradientDrawsBeforeStartLocation | kCGGradientDrawsAfterEndLocation);
  UIImage *image = UIGraphicsGetImageFromCurrentImageContext();
  CGGradientRelease(gradient);
  CGContextRestoreGState(context);
  CGColorSpaceRelease(colorSpace);
  UIGraphicsEndImageContext();
  return image;
}
</code></pre>

<h2>Masonry Update Constrains</h2>

<p>使用Masonry更新约束时，需要更新已经存在的约束条件，不能<code>make top</code>却<code>update bottom</code>，这样约束会冲突报错。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS知识小集-180507]]></title>
    <link href="http://sxgfxm.github.io/blog/2018/05/14/ioszhi-shi-xiao-ji-180507/"/>
    <updated>2018-05-14T10:21:18+08:00</updated>
    <id>http://sxgfxm.github.io/blog/2018/05/14/ioszhi-shi-xiao-ji-180507</id>
    <content type="html"><![CDATA[<h2>WXApi无法分享</h2>

<p>原因：WXApi针对不同分享内容有各种限制因素，必须符合要求才能分享。实际运用中可能影响分享的主要因素是thumbData的大小。
WXMediaMessage
  thumbData大小不能超过32k</p>

<p>可以通过压缩图片来达到WXApi的要求。</p>

<h2>添加proto文件至工程</h2>

<ol>
<li>把proto文件拖入工程目录中；</li>
<li>在 <strong>Compile Sources</strong> 中添加对应proto文件，否则在link时会出现<code>symbol(s) not found for architecture arm64</code>错误，无法找到对应的<code>.o</code>文件；</li>
<li>编译获得proto对应的类文件。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS知识小集-180418]]></title>
    <link href="http://sxgfxm.github.io/blog/2018/05/07/ioszhi-shi-xiao-ji-180418/"/>
    <updated>2018-05-07T15:52:23+08:00</updated>
    <id>http://sxgfxm.github.io/blog/2018/05/07/ioszhi-shi-xiao-ji-180418</id>
    <content type="html"><![CDATA[<h2>UISlider 自定义thumb大小</h2>

<p>需继承<code>UISlider</code>并重写<code>- thumbRectForBounds:trackRect:value:</code>方法。</p>

<pre><code class="objective-c">- (CGRect)thumbRectForBounds:(CGRect)bounds trackRect:(CGRect)rect value:(float)value{
  CGFloat customWidth = 20;
  CGFloat customHeight = 20;
  bounds = [super thumbRectForBounds:bounds trackRect:rect value:value];
  return CGRectMake(bounds.origin.x, bounds.origin.y, customWidth, customHeight);
}
</code></pre>

<!-- more -->


<h2>YYModel 自定义转换</h2>

<p>以<code>NSDate</code>与<code>NSNumber</code>转换为例。
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// JSON:</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">name</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">:&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Harry</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">timestamp</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="o">:</span> <span class="mi">1445534567</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// Model:</span>
</span><span class='line'><span class="k">@interface</span> <span class="nc">User</span>
</span><span class='line'><span class="k">@property</span> <span class="bp">NSString</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">name</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="bp">NSDate</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">createdAt</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">@implementation</span> <span class="nc">User</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">modelCustomTransformFromDictionary:</span><span class="p">(</span><span class="bp">NSDictionary</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="nv">dic</span> <span class="p">{</span>
</span><span class='line'>    <span class="bp">NSNumber</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">timestamp</span> <span class="o">=</span> <span class="n">dic</span><span class="p">[@</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">timestamp</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">[</span><span class="n">timestamp</span> <span class="nl">isKindOfClass</span><span class="p">:[</span><span class="bp">NSNumber</span> <span class="k">class</span><span class="p">]])</span> <span class="k">return</span> <span class="nb">NO</span><span class="p">;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">createdAt</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSDate</span> <span class="nl">dateWithTimeIntervalSince1970</span><span class="p">:</span><span class="n">timestamp</span><span class="p">.</span><span class="n">floatValue</span><span class="p">];</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">YES</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">modelCustomTransformToDictionary:</span><span class="p">(</span><span class="bp">NSMutableDictionary</span> <span class="o">*</span><span class="p">)</span><span class="nv">dic</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">createdAt</span><span class="p">)</span> <span class="k">return</span> <span class="nb">NO</span><span class="p">;</span>
</span><span class='line'>    <span class="n">dic</span><span class="p">[@</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">timestamp</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;]</span> <span class="o">=</span> <span class="l">@(</span><span class="n">n</span><span class="p">.</span><span class="n">timeIntervalSince1970</span><span class="l">)</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">YES</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure></p>
]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ios | Light's Blog]]></title>
  <link href="http://sxgfxm.github.io/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://sxgfxm.github.io/"/>
  <updated>2017-07-10T11:11:34+08:00</updated>
  <id>http://sxgfxm.github.io/</id>
  <author>
    <name><![CDATA[Light]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOS知识小集-170703]]></title>
    <link href="http://sxgfxm.github.io/blog/2017/07/10/ioszhi-shi-xiao-ji-170703/"/>
    <updated>2017-07-10T11:09:16+08:00</updated>
    <id>http://sxgfxm.github.io/blog/2017/07/10/ioszhi-shi-xiao-ji-170703</id>
    <content type="html"><![CDATA[<h2>CAKeyFrameAnimation</h2>

<pre><code>- (CAKeyframeAnimation *)circleShake {
  if (!_circleShake) {
    CGFloat baseX = self.circleMask.position.x;
    _circleShake = [CAKeyframeAnimation animationWithKeyPath:@"position.x"];
    _circleShake.keyTimes = @[
      @0,
      @(0.1 / 0.8),
      @(0.2 / 0.8),
      @(0.3 / 0.8),
      @(0.5 / 0.8),
      @(0.76 / 0.8)
    ];
    _circleShake.values = @[
      @(baseX),
      @(baseX - 11),
      @(baseX + 11),
      @(baseX - 11),
      @(baseX + 11),
      @(baseX)
    ];
    _circleShake.duration = 0.8;
    _circleShake.removedOnCompletion = YES;
    _circleShake.fillMode = kCAFillModeForwards;
  }
  return _circleShake;
}
</code></pre>

<!-- more -->


<h2>Identify CAAnimation within the aniamtionDidStop delegate</h2>

<p>The animation is <strong>copied</strong> before being added to the layer, so any subsequent modifications to <code>anim</code> will have no affect unless it is added to another layer.<br/>
Use <code>animationForKey:</code> to identify.<br/>
Create one animation and add to multiple layers.</p>

<h2>Apply changes when animation finished</h2>

<pre><code>animation.removedOnCompletion = NO;
animation.fillMode = kCAFillModeForwards;
</code></pre>

<h2>Resume changes when animation finished</h2>

<pre><code>animation.removedOnCompletion = NO;
animation.fillMode = kCAFillModeBackwards;
</code></pre>

<h2>Use CAAnimationGroup to run animations cocurrently</h2>

<pre><code>- (CAAnimationGroup *)circleBig {
  if (!_circleBig) {
    _circleBig = [CAAnimationGroup animation];
    CABasicAnimation *circleBig =
        [CABasicAnimation animationWithKeyPath:@"path"];
    circleBig.fromValue = (__bridge id)self.circleMask.path;
    circleBig.toValue =
        (__bridge id)[UIBezierPath bezierPathWithArcCenter:self.centerPoint
                                                    radius:12.5
                                                startAngle:0
                                                  endAngle:M_PI * 2
                                                 clockwise:YES]
            .CGPath;
    circleBig.duration = self.spreadDuration;
    circleBig.removedOnCompletion = NO;
    circleBig.fillMode = kCAFillModeForwards;
    circleBig.timingFunction = [CAMediaTimingFunction
        functionWithName:kCAMediaTimingFunctionEaseInEaseOut];
    CABasicAnimation *changeWidth =
        [CABasicAnimation animationWithKeyPath:@"lineWidth"];
    changeWidth.fromValue = @(self.circleMask.lineWidth);
    changeWidth.toValue = @(5);
    changeWidth.duration = self.spreadDuration;
    changeWidth.removedOnCompletion = NO;
    changeWidth.fillMode = kCAFillModeForwards;
    _circleBig.animations = @[ circleBig, changeWidth ];
  }
  return _circleBig;
}
</code></pre>

<h2>TabBar背景设为透明色</h2>

<pre><code>[[UITabBar appearance] setShadowImage:[WWImageUtil imageWithColor:[UIColor clearColor]]];
[[UITabBar appearance] setBackgroundImage:[WWImageUtil imageWithColor:[UIColor clearColor]]];
[UITabBar appearance].translucent = YES;
</code></pre>

<h2>TabBar去除黑线</h2>

<pre><code>[[UITabBar appearance] setClipsToBounds:YES];
</code></pre>

<h2>self.title</h2>

<p><code>self.title</code>：同时设置导航栏和tabBar的title；<br/>
<code>self.navigationItem.title</code>：设置导航栏title；<br/>
<code>self.tabBarItem.title</code>：设置tabBartitle。</p>

<h2>InHouse 和 Debug配置不同</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS知识小集-170626]]></title>
    <link href="http://sxgfxm.github.io/blog/2017/07/03/ioszhi-shi-xiao-ji-170626/"/>
    <updated>2017-07-03T09:09:47+08:00</updated>
    <id>http://sxgfxm.github.io/blog/2017/07/03/ioszhi-shi-xiao-ji-170626</id>
    <content type="html"><![CDATA[<h2>隐藏tabBar</h2>

<p><code>self.tabBarController.tabBar.hidden=YES;</code></p>

<h2>UIView animate height from bottom to top</h2>

<p>Increase the height while decreasing the origin.y by the same amount.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS知识小集-170619]]></title>
    <link href="http://sxgfxm.github.io/blog/2017/06/26/ioszhi-shi-xiao-ji-170619/"/>
    <updated>2017-06-26T11:57:15+08:00</updated>
    <id>http://sxgfxm.github.io/blog/2017/06/26/ioszhi-shi-xiao-ji-170619</id>
    <content type="html"><![CDATA[<h2>Enable file sharing</h2>

<p>Application Supports iTunes file sharing = YES</p>

<h2>Image Slicing</h2>

<p>使用Xcode Image Slicing图片需为标准的PNG图片。</p>

<h2>TabBar</h2>

<p>高度49</p>

<!-- more -->


<h2>UIPageViewController</h2>

<p>子controller并不会被缩放，而是从上到下布局，可能被截断。</p>

<pre><code>-(void)setupPageController{
  self.pageController =
      [[UIPageViewController alloc] initWithTransitionStyle:UIPageViewControllerTransitionStyleScroll
                                      navigationOrientation:UIPageViewControllerNavigationOrientationVertical
                                                    options:options];
  self.pageController.view.frame = CGRectMake(0, 64, kScreen_Width, kScreen_Height - 64 - 49);
  self.pageController.dataSource = self;
  self.pages = @[ self.mainVC, self.bottomVC ];
  [self.pageController setViewControllers:@[ self.pages.firstObject ]
                                direction:UIPageViewControllerNavigationDirectionForward
                                 animated:YES
                               completion:nil];
  [self addChildViewController:self.pageController];
  [self.view addSubview:self.pageController.view];
}

#pragma mark - UIPageViewControllerDataSource
- (UIViewController *)pageViewController:(UIPageViewController *)pageViewController
      viewControllerBeforeViewController:(UIViewController *)viewController {
  if ([viewController isKindOfClass:[ViewController1 class]]) {
    return nil;
  }
  if ([viewController isKindOfClass:[ViewController2 class]]) {
    return self.pages[0];
  }
  return nil;
}

- (UIViewController *)pageViewController:(UIPageViewController *)pageViewController
       viewControllerAfterViewController:(UIViewController *)viewController {
  if ([viewController isKindOfClass:[ViewController1 class]]) {
    return self.pages[1];
  }
  if ([viewController isKindOfClass:[ViewController2 class]]) {
    return nil;
  }
  return nil;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS知识小集-170612]]></title>
    <link href="http://sxgfxm.github.io/blog/2017/06/16/ioszhi-shi-xiao-ji-170612/"/>
    <updated>2017-06-16T14:08:12+08:00</updated>
    <id>http://sxgfxm.github.io/blog/2017/06/16/ioszhi-shi-xiao-ji-170612</id>
    <content type="html"><![CDATA[<h2>MBProgressHUD需要在主线程调用</h2>

<p>UI在主线程操作。</p>

<!-- more -->


<h2>引入库</h2>

<p><code>#import &lt;&gt;</code>: global include<br/>
<code>#import ""</code>: local include<br/>
<code>#import</code>: only include once<br/>
<code>#include</code>: may recursive include<br/>
<code>@import</code>: done automatically</p>

<h2>Edit Scheme</h2>

<p>定义不同的宏</p>

<h2>NSAssert</h2>

<p>多用断言</p>

<h2>打包和解包</h2>

<p>打包：头 + 长度 + 内容。</p>

<pre><code>- (NSData *)packageData:(NSData *)data {
  NSAssert(data &amp;&amp; data.length &gt; 0, @"Data cannot be empty");

  NSMutableData *payload = [NSMutableData data];
  int length = (int)data.length;
  [payload appendBytes:kMagicHeader length:4];
  [payload appendBytes:&amp;length length:4];
  [payload appendData:data];

  return payload;
}
</code></pre>

<p>解包：取头 + 取长度 + 取内容。</p>

<pre><code>- (void)parseData:(NSData *)data {
  @synchronized(self) {
    [self.writeBuffer appendData:data];
    while (self.writeBuffer.length - self.writeBufferOffset &gt; 8) {
      // Parse header
      char header[4];
      [self.writeBuffer getBytes:header range:NSMakeRange(self.writeBufferOffset, 4)];
      if (header[0] != kMagicHeader[0] || header[1] != kMagicHeader[1] || header[2] != kMagicHeader[2] ||
          header[3] != kMagicHeader[3]) {
        NSLog(@"Invalid magic header");
        self.writeBufferOffset += 1;
        continue;
      }

      // Parse length
      int length;
      [self.writeBuffer getBytes:&amp;length range:NSMakeRange(self.writeBufferOffset + 4, 4)];

      // Parse payload
      if (self.writeBuffer.length - self.writeBufferOffset - 8 &lt; length) {
        break;
      }
      NSData *payload = [NSData dataWithBytes:[self.writeBuffer bytes] + self.writeBufferOffset + 8 length:length];
      if (self.delegate) {
        [self.delegate onIncomingData:payload];
      }
      self.writeBufferOffset = self.writeBufferOffset + 8 + length;
      if (self.writeBufferOffset &gt;= self.writeBuffer.length) {
        self.writeBuffer = [[NSMutableData alloc] init];
        self.writeBufferOffset = 0;
      }
    }
  }
}
</code></pre>

<h2>NSNetServiceBrowser</h2>

<p>扫描service。</p>

<pre><code>-(void)start{
  NSNetServiceBrowser *browser = [[NSNetServiceBrowser alloc] init];
  browser.delegate = self;
  [browser searchForServicesOfType:@"_http._tcp." inDomain:@""];
}

- (void)netServiceBrowser:(NSNetServiceBrowser *)aNetServiceBrowser
           didFindService:(NSNetService *)aNetService
               moreComing:(BOOL)moreComing {
  if ([self.serviceTypes containsObject:aNetService.name]) {
    NSLog(@"Found a service: %@", aNetService);
    aNetService.delegate = self;
    [aNetService resolveWithTimeout:5];
  }
}

- (void)netServiceBrowser:(NSNetServiceBrowser *)aNetServiceBrowser
         didRemoveService:(NSNetService *)aNetService
               moreComing:(BOOL)moreComing {
}

- (void)netServiceDidResolveAddress:(NSNetService *)netService {
  if ([self.serviceTypes containsObject:netService.name]) {
    [self.delegate serviceAdded:netService];
  }
  NSURL *serviceURL = [NSURL URLWithString:[NSString stringWithFormat:@"http://%@:%li", netService.hostName, (long)netService.port]];
  NSLog(@"Resolved address for service %@: %@", netService, serviceURL);
}

- (void)netService:(NSNetService *)sender didNotResolve:(NSDictionary *)errorDict {
  NSLog(@"Couldn't resolve address for service %@: %@", sender, errorDict);
}
</code></pre>

<h2>Compress files and folder</h2>

<p><strong>Zip</strong></p>

<pre><code>zip -r -X archive_name.zip folder_to_compress
unzip archive_name.zip
</code></pre>

<h2>Upload a file to Google Drive from the command line</h2>

<p>Install <a href="https://github.com/prasmussen/gdrive">gdrive</a>, a command line utility for interacting with Google Drive.</p>

<pre><code>brew install gdrive
</code></pre>

<pre><code>gdrive list
gdrive download file_name
gdrive upload file_name
</code></pre>

<h2>Open a certain folder in Atom</h2>

<pre><code>cd folder_path
atom .
</code></pre>

<h2>AFHTTPSessionManager</h2>

<pre><code>AFHTTPSessionManager *manager = [AFHTTPSessionManager manager];
  manager.responseSerializer = [AFHTTPResponseSerializer serializer];
  [manager GET:kXGFeedbackURL
      parameters:nil
      success:^(NSURLSessionDataTask *_Nonnull task, id _Nonnull responseObject) {
        NSError *error = nil;
        self.dataSource = [[XGFeedbackResponse alloc] initWithData:responseObject error:&amp;error];
        if (error) {
          DDLogDebug(@"XG - Feedback response error %@", error.localizedDescription);
        }
        DDLogDebug(@"XG - Feedback response %@", self.dataSource);
      }
      failure:^(NSURLSessionDataTask *_Nullable task, NSError *_Nonnull error) {
        DDLogDebug(@"XG - Feedback fail %@", error.localizedDescription);
      }];
</code></pre>

<h2>JSONModel</h2>

<pre><code>#import &lt;JSONModel/JSONModel.h&gt;

@protocol XGFeedbackItem;
@protocol XGFeedbackCategory;

@interface XGFeedbackItem : JSONModel

@property(nonatomic, strong) NSString *cn;
@property(nonatomic, strong) NSString *en;
@property(nonatomic, strong) NSString *tw;

@end

@interface XGFeedbackCategory : JSONModel

@property(nonatomic, strong) XGFeedbackItem *title;
@property(nonatomic, strong) NSArray&lt;XGFeedbackItem *&gt;&lt;XGFeedbackItem&gt; *detail;
@property(nonatomic, assign) BOOL multiple;

@end

@interface XGFeedbackResponse : JSONModel

@property(nonatomic, strong) NSString *product;
@property(nonatomic, strong) NSArray&lt;XGFeedbackCategory *&gt;&lt;XGFeedbackCategory&gt; *content;

@end
</code></pre>

<h2>获取系统语言</h2>

<pre><code>NSString *language = [[NSLocale preferredLanguages] firstObject];
  if ([language hasPrefix:@"zh-Hans"]) {
    return self.cn;
  } else if ([language hasPrefix:@"zh-Hant"]) {
    return self.tw;
  } else {
    return self.en;
  }
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS知识小集-170605]]></title>
    <link href="http://sxgfxm.github.io/blog/2017/06/12/ioszhi-shi-xiao-ji-170605/"/>
    <updated>2017-06-12T09:42:42+08:00</updated>
    <id>http://sxgfxm.github.io/blog/2017/06/12/ioszhi-shi-xiao-ji-170605</id>
    <content type="html"><![CDATA[<h2>fopen时路径名为日文时崩溃</h2>

<p>路径中尽量不要出现特殊字符。</p>

<!-- more -->


<h2>显示 &lt; 号</h2>

<p>居然因为是字体原因</p>

<pre><code>      CGFloat width = kScaleFrom_iPhone6_Desgin(5);
      CAShapeLayer *shapeLayer = [CAShapeLayer layer];
      shapeLayer.frame = CGRectMake(CGRectGetMinX(textLayer.frame) - kScaleFrom_iPhone6_Desgin(9), 0, width, width);
      shapeLayer.position = CGPointMake(shapeLayer.position.x, point.y);
      UIBezierPath *path = [UIBezierPath bezierPath];
      [path moveToPoint:CGPointMake(0, width / 2)];
      [path addLineToPoint:CGPointMake(width, 0)];
      [path moveToPoint:CGPointMake(0, width / 2)];
      [path addLineToPoint:CGPointMake(width, width)];
      shapeLayer.path = path.CGPath;
      shapeLayer.strokeColor = UIColorFromRGBA(0xff959595).CGColor;
      shapeLayer.fillColor = [UIColor clearColor].CGColor;
      shapeLayer.lineWidth = 1;
      shapeLayer.lineCap = kCALineCapButt;
      shapeLayer.lineJoin = kCALineJoinMiter;
      [self.yAxisLayer addSublayer:shapeLayer];
</code></pre>

<h2>Register DDLog</h2>

<pre><code>  // Register DDLog
  [DDLog addLogger:[DDTTYLogger sharedInstance]];  // TTY = Xcode console
  [DDLog addLogger:[DDASLLogger sharedInstance]];  // ASL = File log
</code></pre>
]]></content>
  </entry>
  
</feed>

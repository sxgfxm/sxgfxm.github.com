<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ios | Light's Blog]]></title>
  <link href="http://sxgfxm.github.io/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://sxgfxm.github.io/"/>
  <updated>2017-11-10T17:03:33+08:00</updated>
  <id>http://sxgfxm.github.io/</id>
  <author>
    <name><![CDATA[Light]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOS知识小集-171106]]></title>
    <link href="http://sxgfxm.github.io/blog/2017/11/10/ioszhi-shi-xiao-ji-171106/"/>
    <updated>2017-11-10T17:01:04+08:00</updated>
    <id>http://sxgfxm.github.io/blog/2017/11/10/ioszhi-shi-xiao-ji-171106</id>
    <content type="html"><![CDATA[<h2>UIViewController modalPresentationStyle</h2>

<p>当present controller时，可以设置这个属性来控制present时的效果，可用于透明显示被遮盖的conroller，此情况下被遮盖的conroller不会调用viewDidDisappear。</p>

<!-- more -->


<h2>UIPageViewController vs. UIScrollView</h2>

<p>两者都可添加controller，实现滑动切换conroller切换的效果。<br/>
UIPageViewController支持子controller生命周期函数调用，添加到UIScrollView上的controller滑动时不会调用生命周期函数。<br/>
UIPageViewController便于代码分离。<br/>
UIPageViewController没有暴露bounces属性，无法通过系统API禁用，需要特殊操作才可以，这一点UIScrollView有优势。<br/>
UIPageViewController滑动时获取的contentOffset不够准确，需要特殊处理，这一点UIScrollView有优势。<br/>
特殊处理方法：</p>

<pre><code class="objective-c">//  设置UIPageViewController的scrollView的代理为self
for (id view in self.pageController.view.subviews) {
    if ([view isKindOfClass:[UIScrollView class]]) {
      UIScrollView *scrollView = (UIScrollView *)view;
      scrollView.delegate = self;
    }
 }
</code></pre>

<pre><code class="objective-c">- (void)setOffset:(CGFloat)offset {
    _offset = offset;
    //  Do something with offsetX
}

- (void)scrollViewDidScroll:(UIScrollView *)scrollView {
    CGFloat width = scrollView.bounds.size.width;
    CGFloat offset = self.offset;
    NSInteger childCount = self.childControllers.count;
    // 将当前滑动显示的view 的坐标 =&gt; self.view 的坐标
    for (UIViewController *vc in self.childControllers) {
      CGPoint p = [vc.view convertPoint:CGPointMake(0, 0) toView:self.view];
      if (p.x &gt; 0 &amp;&amp; p.x &lt; width) {
        NSInteger index = [self.childControllers indexOfObject:vc];
        offset = index * width - p.x;
      }
    }
    if (offset &gt;= (childCount - 1) * width) {
      CGPoint p = [self.childControllers.lastObject.view convertPoint:CGPointMake(0, 0) toView:self.view];
      offset = (childCount - 1) * width - p.x;
    }
    self.offset = offset;
}

- (void)scrollViewDidEndDecelerating:(UIScrollView *)scrollView {
    CGFloat width = scrollView.bounds.size.width;
    NSInteger index = round(self.offset / width);
    if (index &lt; 0) {
      index = self.childControllers.count - 1;
    }
    self.offset = index * width;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS知识小集-171030]]></title>
    <link href="http://sxgfxm.github.io/blog/2017/11/10/ioszhi-shi-xiao-ji-171030/"/>
    <updated>2017-11-10T16:39:04+08:00</updated>
    <id>http://sxgfxm.github.io/blog/2017/11/10/ioszhi-shi-xiao-ji-171030</id>
    <content type="html"><![CDATA[<h2>ReactiveObjC</h2>

<p>To be finished.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS知识小集-171023]]></title>
    <link href="http://sxgfxm.github.io/blog/2017/11/02/ioszhi-shi-xiao-ji-171023/"/>
    <updated>2017-11-02T10:34:10+08:00</updated>
    <id>http://sxgfxm.github.io/blog/2017/11/02/ioszhi-shi-xiao-ji-171023</id>
    <content type="html"><![CDATA[<h2>UITableView AccessoryView TintColor</h2>

<p>通过设置Cell的TintColor来设置AccessoryView的tintColor。</p>

<h2>Git Rebase</h2>

<p><code>git rebase</code>会删除<code>merge commit</code>。<br/>
进行merge操作后不要向其amend代码。</p>

<!-- more -->


<h2>UITableViewCell</h2>

<p>注意在返回cell的代理方法中，不要重复创建view。</p>

<h2>UITableViewCell高度自适应</h2>

<ol>
<li><code>estimatedRowHeight</code>；</li>
<li><code>-systemLayoutSizeFittingSize:</code> + cache height；</li>
<li>ComponentKit；</li>
</ol>


<h2>layoutIfNeeded、setNeedsLayout、setNeedsDisplay</h2>

<p>// TODO</p>

<h2>动态更新Cell高度</h2>

<pre><code class="objective-c">  [self.tableView beginUpdates];
  [self.tableView endUpdates];
</code></pre>

<h2>UIImageView Animation</h2>

<pre><code class="objective-c">  self.imageView = [[UIImageView alloc] initWithFrame:CGRectMake(100, 200, 50, 50)];
  self.imageView.animationImages = @[[UIImage imageNamed:@"Image1"],[UIImage imageNamed:@"Image2"],[UIImage imageNamed:@"Image3"]];
  self.imageView.animationDuration = 0.75;
  self.imageView.animationRepeatCount = 10;
  [self.view addSubview:self.imageView];
  [self.imageView startAnimating];
  [self.imageView stopAnimating];
</code></pre>

<h2>AVAudioPlayer Simple Use</h2>

<pre><code class="objective-c">- (AVAudioPlayer *)startAudioPlayer {
  if (!_startAudioPlayer) {
    NSString *path = [NSString stringWithFormat:@"%@/startAudio.wav", [[NSBundle mainBundle] resourcePath]];
    NSURL *soundURL = [NSURL fileURLWithPath:path];
    NSError *error = nil;
    _startAudioPlayer = [[AVAudioPlayer alloc] initWithContentsOfURL:soundURL error:&amp;error];
    if (error) {
      DDLogDebug(@"Can't find audio file %@", error.localizedDescription);
    }
  }
  return _startAudioPlayer;
}
</code></pre>

<pre><code class="objective-c">  [self.startAudioPlayer play];
  [self.startAudioPlayer pause];
</code></pre>

<h2>模糊效果</h2>

<h3>UIBlurEffect</h3>

<p>可以选择模糊亮度，但无法自定义模糊半径。</p>

<pre><code class="objective-c">  UIBlurEffect *blurEffect = [UIBlurEffect effectWithStyle:UIBlurEffectStyleLight];
  UIVisualEffectView *blurView = [[UIVisualEffectView alloc] initWithEffect:blurEffect];
  blurView.frame = myView.bounds;
  [myView addSubview:blurView];
</code></pre>

<h3>CIImage &amp; CIFilter</h3>

<p>可以选择滤波算法，并设置滤波参数。</p>

<pre><code class="objective-c">- (UIImage *)convertToBlurImage:(UIImage *)image {
  //  create input image
  CIImage *inputImage = [CIImage imageWithCGImage:[image CGImage]];
  //  create filter
  CIFilter *gaussianBlurFilter = [CIFilter filterWithName:@"CIGaussianBlur"];
  //  set filter parameters
  [gaussianBlurFilter setDefaults];
  [gaussianBlurFilter setValue:inputImage forKey:kCIInputImageKey];
  [gaussianBlurFilter setValue:@6 forKey:kCIInputRadiusKey];
  //  create output image
  CIImage *outputImage = [gaussianBlurFilter outputImage];
  CIContext *context = [CIContext contextWithOptions:nil];
  CGImageRef cgimg = [context createCGImage:outputImage fromRect:[inputImage extent]];
  //  get UIImage
  UIImage *convertedImage = [UIImage imageWithCGImage:cgimg];
  return convertedImage;
}
</code></pre>

<h2>UIView to UIImage</h2>

<pre><code class="objective-c">- (UIImage *)imageFromUIView:(UIView *)view {
  UIGraphicsBeginImageContextWithOptions(view.bounds.size, YES, 0.0);
  //  render view in context
  [view.layer renderInContext:UIGraphicsGetCurrentContext()];
  //  get image from context
  UIImage *image = UIGraphicsGetImageFromCurrentImageContext();
  UIGraphicsEndImageContext();
  return image;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS知识小集-171016]]></title>
    <link href="http://sxgfxm.github.io/blog/2017/10/17/ioszhi-shi-xiao-ji-171016/"/>
    <updated>2017-10-17T19:06:22+08:00</updated>
    <id>http://sxgfxm.github.io/blog/2017/10/17/ioszhi-shi-xiao-ji-171016</id>
    <content type="html"><![CDATA[<h2>Clear iOS DeviceSupport to free disk storage</h2>

<p>真机调试时，不同系统的手机会生成不同的Device Support文件，每个大概3GB左右，占用大量磁盘空间。删除不需要的Device Support文件，可以释放大量磁盘空间。
iOS DeviceSupport 目录路径<code>[User]/Library/Developer/Xcode/iOS DeviceSupport</code></p>

<h2>Compute CKComponent size</h2>

<p>获取component的size。</p>

<pre><code class="objective-c">  #import &lt;ComponentKit/CKComponentSubclass.h&gt;

  - (CGSize)sizeOfComponent:(CKComponent*)component{
    return [component computeLayoutThatFits: CKSizeRange()].size;
  }
</code></pre>

<!-- more -->


<h2>CKComponentRootView</h2>

<p>获取component对应的根视图，在CKComponentController中可以自定义根视图。</p>

<pre><code class="objective-c">  CKComponentRootView *rootView = component.viewContext.view;
</code></pre>

<h2>CKComponentController</h2>

<ol>
<li>命名必须为<strong>ComponentName+Controller</strong>，继承至CKComponentController；</li>
<li>Component必须添加<strong>Scope</strong>，<code>CKComponentScope scope(self, model)</code>；</li>
<li>ComponentController可以监控component的生命周期，进行设置；</li>
<li><code>-didMount</code>，已经加载完成，包括所有的子component；</li>
<li><code>-willUpdateComponent</code>，component即将更新时调用；</li>
<li><code>-willRemount</code>，component正在update或root component被关联到其他root view时调用；</li>
<li><code>-componentTreeWillAppear</code>，当调用<code>-willDisplayCell:for{Row|Item}AtIndexPath:</code>时调用；</li>
</ol>


<h2><a href="https://github.com/lefex/TCZLocalizableTool">TCZLocalizableTool</a></h2>

<p>通过Python脚本检查本地化文件中语法错误。</p>

<h2>Horizontal ScrollComponent of CKComponent</h2>

<p>Add a horizontal UIScrollView to a vertical UICollectionView by ComponentKit.</p>

<ol>
<li>Create a <strong>CKStackLayoutComponent</strong> component and set [<strong>UIScrollView</strong> class] in block newWithView;</li>
<li>In <code>-didMount</code>, get the scroll view and set its <code>contentSize</code>;</li>
<li>In <code>-didUpdateComponent</code>, update its <code>contentSize</code> if the component has changed.</li>
</ol>


<p>.h</p>

<pre><code>#import &lt;ComponentKit/ComponentKit.h&gt;

@interface XGHorizontalScrollComponent : CKCompositeComponent

+ (instancetype)newWithChildren:(std::vector&lt;CKStackLayoutComponentChild&gt;)children;

@end

@interface XGHorizontalScrollComponentController : CKComponentController

@end
</code></pre>

<p>.mm</p>

<pre><code>#import "XGHorizontalScrollComponent.h"
#import &lt;ComponentKit/CKComponentSubclass.h&gt;

@interface XGHorizontalScrollComponent()

@property(nonatomic, strong) CKComponent *scrollComponent;

@end

@implementation XGHorizontalScrollComponent

+ (instancetype)newWithChildren:(std::vector&lt;CKStackLayoutComponentChild&gt;)children{
  CKComponentScope scope(self);
  CKComponent *content = [CKStackLayoutComponent
                          newWithView:{
                            [UIScrollView class]
                          }
                          size:{}
                          style:{
                            .direction = CKStackLayoutDirectionHorizontal,
                            .alignItems = CKStackLayoutAlignItemsStretch
                          }
                          children:{children}];
  XGHorizontalScrollComponent *component = [super newWithComponent:content];
  if (component) {
    component-&gt;_scrollComponent = content;
  }
  return component;
}

@end

@implementation XGHorizontalScrollComponentController

- (void)didMount {
  [super didMount];
  //  Get scroll component
  XGHorizontalScrollComponent *component = (XGHorizontalScrollComponent*)self.component;
  CKComponent *scrollComponent = component.scrollComponent;
  //  Get component size
  CKSizeRange range = CKSizeRange();
  CKComponentLayout layout = [scrollComponent computeLayoutThatFits:range];
  //  Get scroll view
  UIScrollView *scrollView = (UIScrollView *)scrollComponent.viewContext.view;
  //  Set scroll view properties, you can custom scrollView here
  scrollView.showsHorizontalScrollIndicator = NO;
  scrollView.showsVerticalScrollIndicator = NO;
  //  Set contentSize
  [scrollView setContentSize:layout.size];
}

//  Invoked when the component is updated
-(void)didUpdateComponent{
  [super didUpdateComponent];
  //  Update contentSize
  XGHorizontalScrollComponent *component = (XGHorizontalScrollComponent*)self.component;
  CKComponent *scrollComponent = component.scrollComponent;
  CKSizeRange range = CKSizeRange();
  CKComponentLayout layout = [scrollComponent computeLayoutThatFits:range];
  UIScrollView *scrollView = (UIScrollView *)scrollComponent.viewContext.view;
  [scrollView setContentSize:layout.size];
}

@end
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS知识小集-171009]]></title>
    <link href="http://sxgfxm.github.io/blog/2017/10/13/ioszhi-shi-xiao-ji-171009/"/>
    <updated>2017-10-13T17:04:25+08:00</updated>
    <id>http://sxgfxm.github.io/blog/2017/10/13/ioszhi-shi-xiao-ji-171009</id>
    <content type="html"><![CDATA[<h2>NSInteger to NSData</h2>

<pre><code class="objective-c">  -(NSData*)dataWithInteger:(NSInteger)integer{
    return [NSData dataWithBytes:&amp;integer length:sizeof(integer)];
  }
</code></pre>

<h2>UICollectionView contentInset</h2>

<p>设置内容距离上下左右的间距。</p>

<!-- more -->


<h2>Snapshot CKComponent</h2>

<pre><code class="objective-c">#import "CKComponentSnapshotTestCase.h"

#import &lt;ComponentKitTestHelpers/CKComponentLifecycleTestHelper.h&gt;

const CKComponentLayout componentLayout = [component layoutThatFits:sizeRange parentSize:sizeRange.max];
CKComponentLifecycleTestHelper *componentLifecycleTestController = [[CKComponentLifecycleTestHelper alloc] initWithComponentProvider:nil sizeRangeProvider:nil];
[componentLifecycleTestController updateWithState:(CKComponentLifecycleTestHelperState){
  .componentLayout = componentLayout
}];
UIView *view = [[UIView alloc] initWithFrame:{0,0, componentLayout.size.width, componentLayout.size.height}];
[componentLifecycleTestController attachToView:view];
</code></pre>

<pre><code class="objective-c">- (UIImage *)_imageForViewOrLayer:(id)viewOrLayer
{
  if ([viewOrLayer isKindOfClass:[UIView class]]) {
    if (_usesDrawViewHierarchyInRect) {
      return [UIImage fb_imageForView:viewOrLayer];
    } else {
      return [UIImage fb_imageForViewLayer:viewOrLayer];
    }
  } else if ([viewOrLayer isKindOfClass:[CALayer class]]) {
    return [UIImage fb_imageForLayer:viewOrLayer];
  } else {
    [NSException raise:@"Only UIView and CALayer classes can be snapshotted" format:@"%@", viewOrLayer];
  }
  return nil;
}
</code></pre>

<pre><code class="objective-c">+ (UIImage *)fb_imageForView:(UIView *)view
{
  CGRect bounds = view.bounds;
  NSAssert1(CGRectGetWidth(bounds), @"Zero width for view %@", view);
  NSAssert1(CGRectGetHeight(bounds), @"Zero height for view %@", view);

  // If the input view is already a UIWindow, then just use that. Otherwise wrap in a window.
  UIWindow *window = [view isKindOfClass:[UIWindow class]] ? (UIWindow *)view : view.window;
  BOOL removeFromSuperview = NO;
  if (!window) {
    window = [[UIApplication sharedApplication] fb_strictKeyWindow];
  }

  if (!view.window &amp;&amp; view != window) {
    [window addSubview:view];
    removeFromSuperview = YES;
  }

  UIGraphicsBeginImageContextWithOptions(bounds.size, NO, 0);
  [view layoutIfNeeded];
  [view drawViewHierarchyInRect:view.bounds afterScreenUpdates:YES];

  UIImage *snapshot = UIGraphicsGetImageFromCurrentImageContext();
  UIGraphicsEndImageContext();

  if (removeFromSuperview) {
    [view removeFromSuperview];
  }

  return snapshot;
}
</code></pre>

<h2>Border &amp;&amp; Shadow</h2>

<p>圆角可以和Border并存，Border属于bounds里面，不会被剪切掉；
圆角不能和Shadow并存，<code>maskToBounds</code>会剪切掉Shadow；</p>
]]></content>
  </entry>
  
</feed>

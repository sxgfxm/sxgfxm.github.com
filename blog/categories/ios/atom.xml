<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ios | Light's Blog]]></title>
  <link href="http://sxgfxm.github.io/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://sxgfxm.github.io/"/>
  <updated>2018-07-30T11:12:32+08:00</updated>
  <id>http://sxgfxm.github.io/</id>
  <author>
    <name><![CDATA[Light]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOS知识小集-180723]]></title>
    <link href="http://sxgfxm.github.io/blog/2018/07/30/ioszhi-shi-xiao-ji-180723/"/>
    <updated>2018-07-30T11:10:55+08:00</updated>
    <id>http://sxgfxm.github.io/blog/2018/07/30/ioszhi-shi-xiao-ji-180723</id>
    <content type="html"><![CDATA[<h2>UITableView Delete Cell</h2>

<p>调用<code>deleteRowsAtIndexPaths:withRowAnimation:</code>时界面出现诡异问题，删除一个cell之后无法继续删除下面的cell。<br/>
暂时解决办法是在数据源中删除对应数据后，直接<code>reloadData</code>而不再调用上述方法。</p>

<h2>UITableViewCell高亮效果</h2>

<p>重写<code>-setHighlighted:animated:</code>方法，当highlighted时改变背景颜色，非highlighted时通过动画修改回去。</p>

<pre><code class="objective-c">- (void)setHighlighted:(BOOL)highlighted animated:(BOOL)animated{
  [super setHighlighted:highlighted animated:animated];
  [self xg_setHighlighted:highlighted animated:animated color:[UIColor lightGrayColor]];
}

- (void)xg_setHighlighted:(BOOL)highlighted animated:(BOOL)animated color:(UIColor *)highlightedColor{
  if (highlighted) {
    self.contentView.backgroundColor = highlightedColor;
  } else {
    [UIView animateWithDuration:0.25 delay:0 options:UIViewAnimationOptionCurveEaseInOut animations:^{
      self.contentView.backgroundColor = [UIColor whiteColor];
    } completion:nil];
  }
}
</code></pre>

<h2>Attempt to present UIViewController on UIViewController whose view is not in the window hierarchy</h2>

<p><code>viewDidLoad:</code>时不能present viewController，改写为<code>viewDidAppear:</code>时进行操作。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS知识小集-180716]]></title>
    <link href="http://sxgfxm.github.io/blog/2018/07/23/ioszhi-shi-xiao-ji-180716/"/>
    <updated>2018-07-23T10:17:06+08:00</updated>
    <id>http://sxgfxm.github.io/blog/2018/07/23/ioszhi-shi-xiao-ji-180716</id>
    <content type="html"><![CDATA[<h2>UIScrollView+EmptyDataSet</h2>

<p>当状态变化时才会触发；<br/>
当列表内无元素时才会显示。</p>

<h2>Update CocoaPods</h2>

<p><code>[sudo] gem install cocoapods</code></p>

<h2>UITableViewCell左滑删除出现后，TableView编辑状态失效</h2>

<p>UITableViewCell需要按规则初始化。</p>

<h2>Masonry、Autolayout断点调试</h2>

<p>1、添加symbolic break point<code>UIViewAlertForUnsatisfiableConstraints</code>；<br/>
2、添加action<code>po [[UIWindow keyWindow] _autolayoutTrace]</code>；<br/>
3、修改出错界面背景颜色<code>e id $myView = (id) 0x10a005a90</code>，<code>e (void)[$myView setBackgroundColor:[UIColor blueColor]]</code>。（0x10a005a90为问题界面地址）</p>

<h2>添加pch文件</h2>

<p>1、创建<code>.pch</code>文件，引入需要全局引入的头文件；<br/>
2、在<code>Build Settings</code>中<code>Prefix Header</code>添加pch文件路径<code>$SRCROOT/工程名/pch文件名</code>，并设置<code>Precompile Prefix Header = YES</code>。<br/>
3、优点：全局导入头文件，不必重复导入；预编译头文件被缓存，提高编译速度；<br/>
4、缺点：非必要全局引入的头文件会带来麻烦；</p>

<!-- more -->


<h2>导航栏相关</h2>

<h3>UIBarButtonItem</h3>

<p>1、非custom view创建的UIBarButtonItem会被<code>UINavigationBar.tintColor</code>渲染，可以根据需求确定；<br/>
2、用custom view创建的UIBarButtonItem更加灵活，表现方式更加多样，且可以添加多种手势控制；<br/>
3、<code>UIBarButtonSystemItemFixedSpace</code>UIBarButtonItem可以用于调整items间距；<br/>
4、使用自定义返回按钮会使左滑退出失效，可设置<code>self.navigationController.interactivePopGestureRecognizer.delegate = self;</code>恢复；</p>

<h3>UINavigationBar</h3>

<p>1、<code>translucent = YES</code>半透明，不自动下移；<code>translucent = NO</code>不透明，自动下移，bar会变为白色；<br/>
2、<code>barTintColor = nil</code>是透明的，<code>barTintColor = [UIColor clearColor]</code>是黑色的；<br/>
3、<code>setBackgroundImage</code>会移除<code>UIVisualEffectView</code>，并且<code>barTintColor</code>失效；<br/>
4、<code>tintColor</code>会渲染非custom view的UIBarButtonItem；</p>

<h3>UINavigationController</h3>

<p>1、Push至一个透明UIViewController会卡顿，初始动画瞬间进行，透明的话会看到，感觉卡顿；</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS知识小集-180619]]></title>
    <link href="http://sxgfxm.github.io/blog/2018/07/16/ioszhi-shi-xiao-ji-180619/"/>
    <updated>2018-07-16T10:20:28+08:00</updated>
    <id>http://sxgfxm.github.io/blog/2018/07/16/ioszhi-shi-xiao-ji-180619</id>
    <content type="html"><![CDATA[<h2>清除UIWebView JavaScript缓存</h2>

<pre><code class="objective-c">[webView stringByEvaluatingJavaScriptFromString:@"localStorage.clear();"];
</code></pre>

<h2>类似网易新闻下拉刷新后的展开动画</h2>

<p>修改<code>anchorPoint</code>为<code>(1, 0.5)</code>。 <br/>
<code>objective-c
- (void)spreadFromCenterAnimation{
  CGRect rectFrom = CGRectMake(kScreen_Width / 2, 300, 0, 60);
  CGRect rectTo = CGRectMake(0, 300, kScreen_Width, 60);
  self.testView = [[UIView alloc] initWithFrame:rectFrom];
  self.testView.backgroundColor = [UIColor blueColor];
  self.testView.layer.anchorPoint = CGPointMake(1, 0.5);
  [self.view addSubview:self.testView];
  [UIView animateWithDuration:1 animations:^{
    self.testView.frame = rectTo;
  } completion:^(BOOL finished) {
    self.testView.frame = rectFrom;
  }];
}
</code></p>

<!-- more -->


<h2>长按移动UITableViewCell</h2>

<pre><code class="objective-c">- (void)addLongPressGesture{
  UILongPressGestureRecognizer *longPress = [[UILongPressGestureRecognizer alloc] initWithTarget:self action:@selector(longPressGestureRecognized:)];
  [self.tableView addGestureRecognizer:longPress];
}

- (void)longPressGestureRecognized:(UILongPressGestureRecognizer*)longPress{
  //  关键点：通过长按手势获取点击位置，进而获取到对应的indexPath，从而操作对应的cell
  CGPoint location = [longPress locationInView:self.tableView];
  NSIndexPath *indexPath = [self.tableView indexPathForRowAtPoint:location];
  static UIView *snapshot = nil;
  static NSIndexPath *sourceIndexPath = nil;
  UIGestureRecognizerState state = longPress.state;
  switch (state) {
    case UIGestureRecognizerStateBegan:{
      if (indexPath) {
        //  移动开始时，截取对应的cell的snapshot，隐藏对应的cell
        sourceIndexPath = indexPath;
        UITableViewCell *cell = [self.tableView cellForRowAtIndexPath:indexPath];
        snapshot = [self customSnapshotFromView:cell];
        __block CGPoint center = cell.center;
        snapshot.center = center;
        snapshot.alpha = 0;
        [self.tableView addSubview:snapshot];
        [UIView animateWithDuration:0.25 animations:^{
          center.y = location.y;
          snapshot.center = center;
          snapshot.transform = CGAffineTransformMakeScale(1.05, 1.05);
          snapshot.alpha = 0.98;
          cell.alpha = 0;
          cell.hidden = YES;
        }];
      }
      break;
    }
    case UIGestureRecognizerStateChanged:{
      //  移动时，不断修改snapshot的位置，并交换数据和cell
      CGPoint center = snapshot.center;
      center.y = location.y;
      snapshot.center = center;
      if (indexPath &amp;&amp; ![indexPath isEqual:sourceIndexPath]) {
        [self.dataSource exchangeObjectAtIndex:indexPath.row withObjectAtIndex:sourceIndexPath.row];
        [self.tableView moveRowAtIndexPath:sourceIndexPath toIndexPath:indexPath];
        sourceIndexPath = indexPath;
      }
      break;
    }
    default:{
      //  移动完成后，显示被移动的cell，移除snapshot
      UITableViewCell *cell = [self.tableView cellForRowAtIndexPath:sourceIndexPath];
      cell.alpha = 0;
      [UIView animateWithDuration:0.25 animations:^{
        snapshot.center = cell.center;
        snapshot.transform = CGAffineTransformIdentity;
        snapshot.alpha = 0.0;
        cell.alpha = 1.0;
      } completion:^(BOOL finished) {
        cell.hidden = NO;
        sourceIndexPath = nil;
        [snapshot removeFromSuperview];
        snapshot = nil;
      }];
      break;
    }
  }
}

- (UIView *)customSnapshotFromView:(UIView *)inputView {
  // Make an image from the input view.
  UIGraphicsBeginImageContextWithOptions(inputView.bounds.size, NO, 0);
  [inputView.layer renderInContext:UIGraphicsGetCurrentContext()];
  UIImage *image = UIGraphicsGetImageFromCurrentImageContext();
  UIGraphicsEndImageContext();
  // Create an image view.
  UIView *snapshot = [[UIImageView alloc] initWithImage:image];
  snapshot.layer.masksToBounds = NO;
  snapshot.layer.cornerRadius = 0.0;
  snapshot.layer.shadowOffset = CGSizeMake(-5.0, 0.0);
  snapshot.layer.shadowRadius = 5.0;
  snapshot.layer.shadowOpacity = 0.4;
  return snapshot;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS知识小集-180522]]></title>
    <link href="http://sxgfxm.github.io/blog/2018/06/19/ioszhi-shi-xiao-ji-180619/"/>
    <updated>2018-06-19T17:49:55+08:00</updated>
    <id>http://sxgfxm.github.io/blog/2018/06/19/ioszhi-shi-xiao-ji-180619</id>
    <content type="html"><![CDATA[<h2>UITextView关闭输入修正</h2>

<p><code>textView.autocorrectionType = UITextAutocorrectionTypeNo</code>
<code>textFiled.autocorrectionType = UITextAutocorrectionTypeNo</code></p>

<h2>NSDateFormatter</h2>

<p>&ldquo;yyyy-MM-dd HH:mm:ss&rdquo;</p>

<h2>UIGraphicsBeginImageContextWithOptions</h2>

<p>传入<code>opaque</code>参数值为<code>NO</code>时可以创建透明的图层。</p>

<h2>load方法、initialize方法</h2>

<p><a href="https://www.jianshu.com/p/872447c6dc3f">https://www.jianshu.com/p/872447c6dc3f</a></p>

<!-- more -->


<h2>UIFont to CFTypeRef</h2>

<p><code>CGFontRef cgFont = CGFontCreateWithFontName((CFStringRef)uiFont.fontName);</code></p>

<h2>fsCachedData</h2>

<p>在查看Cache文件夹下缓存时，发现fsCachedData文件夹过大，便查了下这个文件夹是如何生成的。</p>

<p>在使用NSURLSession进行网络请求时可以设置缓存策略，可以参考<a href="https://www.cnblogs.com/ludashi/p/5556088.html">iOS开发之Alamofire源码解析前奏&ndash;NSURLSession全家桶</a>。当设置缓存策略后，会在默认为"~/Library/Caches/[Boundle ID]/fsCachedData/&ldquo;的目录下生成缓存文件。</p>

<h2>CADisplayLink</h2>

<h3>什么是CADisplayLink</h3>

<p><code>CADisplayLink</code>是一个定时器，其调用周期和屏幕刷新频率有关。每秒调用频率 = 60 / frameInterval。</p>

<h3>适用范围</h3>

<p>检测fps，绘制动画。</p>

<h3>与NSTimer区别</h3>

<p><code>NSTimer</code>调用周期更加灵活，适用范围更广，但准确性不如<code>CADisplayLink</code>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS知识小集-180514]]></title>
    <link href="http://sxgfxm.github.io/blog/2018/05/22/ioszhi-shi-xiao-ji-180514/"/>
    <updated>2018-05-22T11:52:58+08:00</updated>
    <id>http://sxgfxm.github.io/blog/2018/05/22/ioszhi-shi-xiao-ji-180514</id>
    <content type="html"><![CDATA[<h2>GradientButton</h2>

<p>创建渐变背景颜色的Button，如果直接添加CAGradientLayer，会覆盖Button的Image，所以需要创建一张渐变颜色的图片设置为Button的backgroundImage。</p>

<h2>UICollectionViewCell Select Effect</h2>

<p>为UICollectionViewCell添加选中效果。<br/>
方法一：<br/>
重写Cell的<code>-setSelected:</code>方法，在这个方法中增加动画效果。<br/>
The selected state is toggled when the user lifts up from a highlighted cell.
Override these methods to provide custom UI for a selected or highlighted state.<br/>
方法二：<br/>
在CollectionView回调方法<code>-collectionView:didHighlightItemAtIndexPath:</code>和<code>-collectionView:didUnhighlightItemAtIndexPath:</code>中添加动画效果。<br/>
方法三：<br/>
为CollectionViewCell添加<code>-performSelectAnimation</code>方法展示选中的动画效果，当<code>-collectionView:didSelectItemAtIndexPath:</code>时调用该方法。</p>

<!-- more -->


<h2>绘制渐变颜色图片</h2>

<pre><code class="objective-c">- (UIImage *)gradientImageFromColors:(NSArray *)colors startPoint:(CGPoint)startPoint endPoint:(CGPoint)endPoint frame:(CGRect)frame{
  NSMutableArray *mutColors = [NSMutableArray array];
  for (UIColor *color in colors) {
    [mutColors addObject:(id)color.CGColor];
  }
  UIGraphicsBeginImageContextWithOptions(frame.size, YES, 1);
  CGContextRef context = UIGraphicsGetCurrentContext();
  CGContextSaveGState(context);
  CGColorSpaceRef colorSpace = CGColorGetColorSpace([[colors lastObject] CGColor]);
  CGGradientRef gradient = CGGradientCreateWithColors(colorSpace, (CFArrayRef)mutColors, NULL);
  CGPoint start = startPoint;
  CGPoint end = endPoint;
  CGContextDrawLinearGradient(context, gradient, start, end,
                              kCGGradientDrawsBeforeStartLocation | kCGGradientDrawsAfterEndLocation);
  UIImage *image = UIGraphicsGetImageFromCurrentImageContext();
  CGGradientRelease(gradient);
  CGContextRestoreGState(context);
  CGColorSpaceRelease(colorSpace);
  UIGraphicsEndImageContext();
  return image;
}
</code></pre>

<h2>Masonry Update Constrains</h2>

<p>使用Masonry更新约束时，需要更新已经存在的约束条件，不能<code>make top</code>却<code>update bottom</code>，这样约束会冲突报错。</p>
]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ios | Light's Blog]]></title>
  <link href="http://sxgfxm.github.io/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://sxgfxm.github.io/"/>
  <updated>2020-01-17T12:06:47+08:00</updated>
  <id>http://sxgfxm.github.io/</id>
  <author>
    <name><![CDATA[Light]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOS知识小集-201912]]></title>
    <link href="http://sxgfxm.github.io/blog/2020/01/17/ioszhi-shi-xiao-ji-201912/"/>
    <updated>2020-01-17T12:04:23+08:00</updated>
    <id>http://sxgfxm.github.io/blog/2020/01/17/ioszhi-shi-xiao-ji-201912</id>
    <content type="html"><![CDATA[<h2>2019.12.04</h2>

<p>ASR service 增加 enable remote silence。</p>

<h2>2019.12.06</h2>

<p>present 同一个VC会crash。<br/>
UI操作要放到主线程。</p>

<h2>2019.12.09</h2>

<h3>iOS 启动优化</h3>

<h4>启动过程</h4>

<p>冷启动：不在内存，也不存在进程。<br/>
热启动：APP结束后再启动，有部分在内存但没有进程存在。<br/>
resume：APP没结束，全在内存内存中，进程也存在。</p>

<p>iOS启动过程：<br/>
• 根据 info.plist 里的设置加载闪屏，建立沙箱，对权限进行检查等；<br/>
• 加载 Mach-O；<br/>
• 执行 attribute 的 constructor 函数；<br/>
• 加载类扩展；<br/>
• 加载 C++静态对象；<br/>
• 调用+load 函数；<br/>
• 执行 main 函数；<br/>
• Application 初始化，到 applicationDidFinishLaunchingWithOptions 执行完；<br/>
• 初始化帧渲染，到 viewDidAppear 执行完，用户可见可操作。</p>

<h4>分析工具</h4>

<p>Instruments，App launch。</p>

<h4>分析纬度</h4>

<p>线程是计算机资源调度和分配的基本单位，CPU 的使用情况会体现到线程上。</p>

<h4>主线程耗时：</h4>

<p>​    1、使用 <strong>Messier</strong> 生成 trace json 进行分析。<br/>
​    2、手动 hook objc_msgSend 生成 Objective-C 方法耗时数据分析。<em>GCDFetchFeed/SMCallTraceCore.c at master · ming1016/GCDFetchFeed · GitHub</em></p>

<h4>CPU：</h4>

<p>​    1、使用 <strong>Energy Log</strong> 检查 CPU 耗电，前台三分钟或者后台一分钟 CPU 线程连续占用80%以上判定为耗电，同事记录耗电线程堆栈供分析。<br/>
​    2、查看线程情况，<strong>task_theads</strong> 的 <strong>act_list</strong> 数组包含所有线程，使用 <strong>thread_info</strong> 的接口可以返回线程的基本信息 <strong>thread_basic_info_t</strong>。</p>

<h4>内存：</h4>

<p>​    1、查看 APP 内存真实使用情况，<strong>webkit/MemoryFootprintCocoa.cpp</strong>。<br/>
​    2、<strong>JetSam</strong> 会判断 APP 内存使用情况，超出阈值就会杀死APP。<br/>
​    3、<strong>NSProcessInfo</strong> 的 <strong>physicalMemory</strong> 表示设备物理内存大小。</p>

<h4>网络：</h4>

<p>​    1、使用 <strong>Fishhook</strong> hook 网络底层库 <strong>CFNetwork</strong>。<br/>
​    2、指标：DNS 时间，SSL 时间，首包时间，响应时间。</p>

<h4>I/O：</h4>

<p>​    1、使用 <strong>Frida</strong>，动态二进制插桩技术，在程序运行时区插入自定义代码获取 I/O 的耗时和处理数据大小等数据。<br/>
​    2、WWDC。</p>

<h4>延后任务管理</h4>

<p>对于分析后，没必要在启动阶段执行的方法，可以延后执行。一般创建四个队列：<br/>
• 异步串行队列：执行有依赖关系的任务。<br/>
• 异步并行队列：分组执行独立任务，限制任务数量，避免CPU和内存瞬时激增影响主线程用户操作。<br/>
• 闲时主线程串行队列：监听主线程 runloop 状态，在 <strong>kCFRunLoopBeforeWaiting</strong> 时开始执行闲时队列里的任务，在 <strong>kCFRunLoopAfterWaiting</strong> 是停止。<br/>
• 闲时异步串行队列：同上。</p>

<h4>优化后如何保持</h4>

<p>监控启动阶段方法耗时，出现异常快速定位。<br/>
通过 <strong>JSON</strong> 表示监控数据，自动化分析和定位。</p>

<h2>2019.12.10</h2>

<p>CLLocationManager 请求权限需要被强引用。</p>

<h2>2019.12.19</h2>

<h3>iOS 项目架构</h3>

<h4>小团队</h4>

<p>MVC<br/>
MVP<br/>
MVVM<br/>
MVCS</p>

<h3>大团队</h3>

<p>需要考虑如何划分模块粒度、如何分层、如何团队协作。</p>

<h4>划分模块粒度</h4>

<p>首先，模块划分需要遵循规范、清晰的原则。<br/>
其次，SOLID 原则。</p>

<ol>
<li>单一功能原则：对象功能要单一，不要在一个对象里添加很多功能。</li>
<li>开闭原则：扩展是开放的，修改是封闭的。</li>
<li>里氏替换原则：子类对象是可以替代基类对象的。</li>
<li>接口隔离原则：接口的用途要单一，不要在一个接口上根据不同的参数实现多个功能。</li>
<li>依赖反转原则：方法应该依赖抽象，不要依赖实例。iOS 开发就是高层业务方法依赖于协议。
最后，选择合适的粒度。iOS 组件，应该是包含 UI 控件，相关多个小功能的合集，是一种粒度适中的模块。</li>
</ol>


<p>先按物理划分为不同的pod库，然后梳理组件之间的逻辑关系，进行改造。</p>

<p>组件分层：<br/>
1. 底层是与业务无关的基础组件，比如网络和存储等；
2. 中间层是通用的业务组件，比如账号、埋点、支付、购物车等；
3. 最上层是迭代业务组件，更新频率最高。</p>

<p>被多个业务或团队使用的功能模块才需要做成组件。</p>

<h4>多团队分工</h4>

<p>首先，基建团队，负责业务无关的基础功能组件和业务相关的通用业务组件。<br/>
然后，业务团队，耦合度高的业务可以划分成单独的业务团队。<br/>
最后，人员相互流动，相互了解。</p>

<h4>理想的架构</h4>

<p>协议式架构：采用协议式编程思路，在编译层使用协议定义规范，实现可在不同地方，从而达到分布管理和维护组件的目的。<br/>
缺点：缺少统一调度层，导致难于集中管理；协议过于规范，不够灵活。</p>

<p>中间者架构：采用中间者统一管理的方式，来控制APP的整个生命周期中组件的调用关系。组件接口设计要保持一致。<br/>
CTMediator，运行时解耦。</p>

<h2>2019.12.31</h2>

<p>使用 <code>lame</code> 库，实现 pcm 流 转 mp3 流。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS知识小集-201911]]></title>
    <link href="http://sxgfxm.github.io/blog/2020/01/17/ioszhi-shi-xiao-ji-201911/"/>
    <updated>2020-01-17T12:03:37+08:00</updated>
    <id>http://sxgfxm.github.io/blog/2020/01/17/ioszhi-shi-xiao-ji-201911</id>
    <content type="html"><![CDATA[<h2>2019.11.10</h2>

<p>xcode 11.2 无法上传APP至商店，需要使用 xcode 11.2.1 GM 版本上传。</p>

<h2>2019.11.11</h2>

<p>使用<code>GCDAsyncSocket</code>实现APP间通信，需要server端先开启，然后client端去连接。<br/>
可以在后台接收socket消息，但是如果被挂起后，将无法接收。<br/>
可以通过静默推送唤醒后台挂起应用，然后处理socket消息。</p>

<p>GATT 协议栈。</p>

<h2>2019.11.12</h2>

<p>iOS 可以实现多个APP作为中心设备与同一个周边设备建立BLE连接。<br/>
APP 可以获取当前正在连接的设备（retrieve），然后直接与之建立BLE连接。</p>

<h2>2019.11.13</h2>

<p><a href="https://apps.apple.com/cn/app/transporter/id1450874784?l=en&amp;mt=12">Transporter</a> 通过非命令行上传APP。</p>

<p><code>Google/SignIn</code>：3.0版本<br/>
<code>GoogleSignIn</code>：4.0版本</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS知识小集-201910]]></title>
    <link href="http://sxgfxm.github.io/blog/2020/01/17/ioszhi-shi-xiao-ji-201910/"/>
    <updated>2020-01-17T12:02:44+08:00</updated>
    <id>http://sxgfxm.github.io/blog/2020/01/17/ioszhi-shi-xiao-ji-201910</id>
    <content type="html"><![CDATA[<h2>2019.10.09</h2>

<p>同一个ViewController不能连续present两个ViewController。<br/>
苹果的思维非同凡响，其实你只需要解散一个Modal View Controller就可以了。即处于最底层的View Controller，这样处于这个层之上的ModalView Controller统统会被解散。</p>

<h2>2019.10.21</h2>

<p><code>MPRemoteCommandCenter</code> 与 <code>AVAudioSession</code> 有关系。<br/>
如果增加<code>AVAudioSessionCategoryOptionMixWithOthers</code>，远程控制会消失。<br/>
I faced the same related issue. AVAudioSessionCategory should be mixwithothers, and you will no longer can update Lock Screen Control Center with info.</p>

<h2>2019.10.23</h2>

<p>以16进制查看文件<br/>
1、<code>vim</code>，<code>:%!xxd</code>转换为十六进制查看，<code>:%!xxd -r</code>转换为文本查看。<br/>
2、<code>hexdump -C file | more</code>。</p>

<h2>2019.10.31</h2>

<p>制定协议需要添加版本号。</p>

<p>当找不出问题时，考虑是否会受上下文影响。</p>

<p>BLE通知消息有Notify和Indicate两种。</p>

<p>iPhone 7及以下机型蓝牙版本为4.2，iPhone 8及以上机型蓝牙版本为5.0。</p>

<p>iPhone 6 BLE 发送数据发送间隔有最小限制30ms。</p>

<h2>2019.10.31</h2>

<p><strong>Symbolic Breakpoint</strong> 查找参数为nil的情况。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS知识小集-201909]]></title>
    <link href="http://sxgfxm.github.io/blog/2020/01/17/ioszhi-shi-xiao-ji-201909/"/>
    <updated>2020-01-17T11:49:59+08:00</updated>
    <id>http://sxgfxm.github.io/blog/2020/01/17/ioszhi-shi-xiao-ji-201909</id>
    <content type="html"><![CDATA[<h2>2019.09.03</h2>

<h3>适配 iOS 13</h3>

<p>1、需要适配 dark mode。现强制设为非 dark mode；</p>

<pre><code>if (@available(iOS 13.0, *)) {
    self.window.overrideUserInterfaceStyle = UIUserInterfaceStyleLight;
}
</code></pre>

<p>2、present 默认状态变为 卡片弹出，可下滑退出，可设置 <code>self.modalPresentationStyle = UIModalPresentationFullScreen;</code> <br/>
3、device token 解析方法改变：</p>

<pre><code>#include &lt;arpa/inet.h&gt;
- (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken
{
    if (![deviceToken isKindOfClass:[NSData class]]) return;
    const unsigned *tokenBytes = [deviceToken bytes];
    NSString *hexToken = [NSString stringWithFormat:@"%08x%08x%08x%08x%08x%08x%08x%08x",
                          ntohl(tokenBytes[0]), ntohl(tokenBytes[1]), ntohl(tokenBytes[2]),
                          ntohl(tokenBytes[3]), ntohl(tokenBytes[4]), ntohl(tokenBytes[5]),
                          ntohl(tokenBytes[6]), ntohl(tokenBytes[7])];
    NSLog(@"deviceToken:%@",hexToken);
}
</code></pre>

<p>4、导航栏 label 需要设置frame，否则颜色会异常；<br/>
5、label add layer 会遮盖文字；<br/>
6、获取 keyWindow；<br/>
7、<code>Privacy - Bluetooth Always Usage Description</code>：增加该权限配置；<br/>
8、UITextfield placeholder 颜色；<br/>
9、NSData to HexString</p>

<pre><code>@implementation NSData (HexRepresentation)

- (NSString *)hexString {
    const unsigned char *bytes = (const unsigned char *)self.bytes;
    NSMutableString *hex = [NSMutableString new];
    for (NSInteger i = 0; i &lt; self.length; i++) {
        [hex appendFormat:@"%02x", bytes[i]];
    }
    return [hex copy];
}

@end
</code></pre>

<h2>2019.09.04</h2>

<p>Wireless debug</p>

<pre><code>@startuml
WWLoginController -&gt; WWThirdPartyLoginManager : press apple sign in button
WWThirdPartyLoginManager --&gt; WWLoginController : apple sigin and send (userId, accessToken) back
WWLoginController -&gt; WWThirdPartyAccountManager : send (loginType, userId, accessToken) to third party account manager
WWThirdPartyAccountManager --&gt; WWLoginController : send (loginType, userId, accessToken) to server and send login status back
WWLoginController -&gt; WWAccountRelatedManager : login succeeded, save (loginType, userId, responseObject)
WWLoginController -&gt; WWRegisterInputNumberController : login failed, register phone number
@enduml
</code></pre>

<h2>2019.09.05</h2>

<h3>Apple Sign In</h3>

<p><strong>操作未完成</strong>：需要删除APP重新安装才生效；</p>

<h2>2019.09.06</h2>

<h3>Unit Test</h3>

<p>添加 Unit Test：创建工程时添加；添加新的 Target，选择 Test；<br/>
添加 测试文件：新建文件时选择测试文件；<br/>
can&rsquo;t find import files：运行一次就好了；</p>

<p><strong>如何测试代理</strong><br/>
<strong>如何测试block</strong></p>

<h2>2019.09.09</h2>

<p><strong>Failed to connect to github.com port 443: Operation timed out</strong>：<code>https://www.githubstatus.com/</code></p>

<h2>2019.09.11</h2>

<p><strong>生产者 - 消费者问题</strong>：cache 缓存数据，queue 读取数据，当cache为空时，queue应该等待，不能结束。
mark down mathjax：写数学公式。<br/>
<a href="https://stackoverflow.com/questions/30794479/the-sound-muted-after-playing-audio-with-audio-queue-on-ios-for-a-while?rq=1">音频流播放</a></p>

<h2>2019.09.16</h2>

<p><strong>TTS中断问题</strong>：先缓存0.5秒数据再开始播放。<br/>
<strong>AVAudioSessionErrorCodeCannotStartRecording（561145187）</strong>：无法后台语音识别。<br/>
<strong>AVAudioSessionErrorCodeCannotStartPlaying（561015905）</strong>：无法后台语音识别。</p>

<h2>2019.09.17</h2>

<p><strong>Error: Multiple commands produce</strong>：切换为 legacy build system。<br/>
<strong>(Enterprise) Sign In with Apple</strong>：去掉企业版capability中 sign in with apple 选项。</p>

<pre><code>@startwbs
* OTA
** BLE Connection
*** CSRConnectionManager \n -connectPeripheral
*** CSRConnectionManager \n -addDelegate:
*** CSRConnectionManager \n -stopScan
** Gaia Connection(-discoveredPripheralDetails)
*** CSRGaia \n -connectPeripheral:
*** CSRGaiaManager \n -setDataEndPointMode:
** BLE Disconnection
*** CSRConnectionManager \n -removeDelegate: \n disconnectPeripheral
@end
</code></pre>

<p><strong>Error Domain=NSOSStatusErrorDomain Code=1954115647 &ldquo;(null)&rdquo;</strong>：音频数据不完整导致初始化音频播放器出错。</p>

<h2>2019.09.18</h2>

<p>Gaia VA</p>

<h3>封装、解析 Gaia 数据包  Done</h3>

<p><code>CSRGaiaGattCommand</code><br/>
  <code>- initWithLength:</code><br/>
  <code>- initWithNSData:</code></p>

<p>封装 command + vendor_id + data：</p>

<pre><code>- (NSData *)gaiaPacketWithCommand:(GaiaCommandType)command
                           vendor:(uint16_t)vendor_id
                             data:(NSData *)params{
  CSRGaiaGattCommand *cmd = [[CSRGaiaGattCommand alloc] initWithLength:GAIA_GATT_HEADER_SIZE];        
  if (cmd) {
    [cmd setCommandId:command];
    [cmd setVendorId:vendor_id];

    if (params) {
      [cmd addPayload:params];
    }

    NSData *packet = [cmd getPacket];

    DLog(@"Outgoing packet: %@", packet);
    return packet;
  }
  return nil;
}
</code></pre>

<p>解析</p>

<pre><code>- (CSRGaiaGattCommand *)gaiaGattCommandWithGaiaPacket:(NSData *)packet{
  return [[CSRGaiaGattCommand alloc] initWithNSData: packet];
}

- (NSData *)payloadWithGaiaGattCommand:(CSRGaiaGattCommand *)command{
  //  command type
  GaiaCommandType cmdType = [command getCommandId];
  //  payload
  NSData *payload = [command getPayload];
  return payload;
}
</code></pre>

<h3>接收 Gaia 数据包  Done</h3>

<p><code>CSRGaiaManager</code>
  <code>CSRUpdateManagerDelegate</code>
    <code>- didReceiveGaiaGattResponse:</code><br/>
目前在<code>WWTicPodBTManager</code>中有监听。</p>

<h3>发送 Gaia 数据包  Todo</h3>

<p><code>CSRGaiaManager</code>
  <code>- getBattery</code>
    <code>CSRGaia</code>
      <code>- getBattery</code>
        <code>- sendCommand:vendor:data:</code></p>

<pre><code>- (void)getBattery {    
    [self sendCommand:GaiaCommand_GetCurrentBatteryLevel
               vendor:CSR_GAIA_VENDOR_ID
                 data:nil];
}

- (void)setVolume:(NSInteger)value {
    NSMutableData *payload = [[NSMutableData alloc] init];
    uint8_t payload_event = (uint8_t)value;

    [payload appendBytes:&amp;payload_event length:1];
    [self sendCommand:GaiaCommand_Volume
               vendor:CSR_GAIA_VENDOR_ID
                 data:payload];
}
</code></pre>

<p>Todo：<br/>
1、在 <code>CSRGaiaManager</code> 中添加 VA 相关命令；<br/>
2、在 <code>CSRGaia</code> 中添加 VA 相关命令；</p>

<h3>VA 状态管理  Todo</h3>

<p>消息确认，发送、接收、解析等。</p>

<h2>2019.09.19</h2>

<p>测定 BLE 传输 速率；</p>

<h2>2019.09.23</h2>

<p>运行时间</p>

<pre><code>CFAbsoluteTime startTime =CFAbsoluteTimeGetCurrent();

//在这写入要计算时间的代码

CFAbsoluteTime linkTime = (CFAbsoluteTimeGetCurrent() - startTime);

NSLog(@"Linked in %f ms", linkTime *1000.0);
</code></pre>

<p>音频解码是连续的，解码过程中初始化条件不能被重置。</p>

<h2>2019.09.24</h2>

<p>Voice Assistant State</p>

<pre><code>@startuml
[*] --&gt; VA.CheckVersion

VA.CheckVersion --&gt; VA.Idle : GaiaCheckVersion

VA.Idle --&gt; VA.VoiceRequesting : GaiaStart
VA.Idle -left-&gt; VA.MobvoiPaused : GaiaMobvoiPaused
VA.Idle -right-&gt; VA.Idle : GaiaMobvoiFeatureEvent

VA.MobvoiPaused --&gt; VA.Idle : GaiaMobvoiResumed

state VA.Idle {
  [*] --&gt; VA.Session.Normal
  [*] --&gt; VA.Session.PushToTalk
  [*] --&gt; VA.Session.Secretary
  [*] --&gt; VA.Session.Joke

  VA.Session.Normal : normal voice query, auto finish
  VA.Session.PushToTalk : longpress voice query, ticpods finish
  VA.Session.Secretary : voice query with special params
  VA.Session.Joke : text query joke
}

VA.VoiceRequesting --&gt; VA.VoiceRequested : GaiaVoiceData

VA.VoiceRequested --&gt; VA.VoiceRequested : GaiaVoiceDataRequest ack
VA.VoiceRequested --&gt; VA.VoiceRequested : GaiaVoiceData
VA.VoiceRequested --&gt; VA.Idle : GaiaVoiceEnd
VA.VoiceRequested --&gt; VA.Idle : GaiaCancel
VA.VoiceRequested --&gt; VA.HostCancelOrEnd : GaiaMobvoiHostVoiceEnd
VA.VoiceRequested --&gt; VA.HostCancelOrEnd : GaiaMobvoiHostCancel

VA.HostCancelOrEnd --&gt; VA.Idle : GaiaVoiceEnd ack
VA.HostCancelOrEnd --&gt; VA.Idle : GaiaCancel ack
VA.HostCancelOrEnd --&gt; VA.Idle : GaiaStart

VA.CheckVersion : GaiaCheckVersion:
VA.CheckVersion : 1. ack GaiaCheckVersion
VA.CheckVersion : 2. check protocol version
VA.CheckVersion : 3. get G722 decoder parameters
VA.CheckVersion : 4. initialize G722 decoder with parameters

VA.Idle : GaiaStart:
VA.Idle : 1. ack GaiaStart
VA.Idle : 2. get session type\n

VA.Idle : GaiaMobvoiPaused:
VA.Idle : 1. no GaiaMobvoiPaused ack
VA.Idle : 2. no GaiaMobvoiFeatureEvent ack\n

VA.Idle : GaiaMobvoiFeatureEvent:
VA.Idle : 1. no GaiaMobvoiFeatureEvent ack
VA.Idle : 2. do special action

VA.MobvoiPaused : GaiaMobvoiResumed:
VA.MobvoiPaused : 1. no GaiaMobvoiResumed ack
VA.MobvoiPaused : 2. ignore voice assistant command

VA.VoiceRequesting : GaiaVoiceData:
VA.VoiceRequesting : 1. no GaiaVoiceData ack
VA.VoiceRequesting : 2. send GaiaVoiceDataRequest

VA.VoiceRequested : GaiaVoiceDataRequest ack:
VA.VoiceRequested : 1. do nothing\n

VA.VoiceRequested : GaiaData:
VA.VoiceRequested : 1. no GaiaData ack
VA.VoiceRequested : 2. decode G722 packet
VA.VoiceRequested : 3. send decoded voice data to speech sdk\n

VA.VoiceRequested : GaiaVoiceEnd:
VA.VoiceRequested : 1. ack GaiaVoiceEnd
VA.VoiceRequested : 2. finish recognition\n

VA.VoiceRequested : GaiaCancel:
VA.VoiceRequested : 1. ack GaiaCancel
VA.VoiceRequested : 2. cancel recognition\n

VA.VoiceRequested : GaiaMobvoiHostVoiceEnd:
VA.VoiceRequested : 1. send GaiaVoiceEnd
VA.VoiceRequested : 2. finish recognition\n

VA.VoiceRequested : GaiaMobvoiHostCancel:
VA.VoiceRequested : 1. send GaiaCancel
VA.VoiceRequested : 2. cancel recognition

VA.HostCancelOrEnd : GaiaVoiceEnd ack:
VA.HostCancelOrEnd : 1. do nothing\n

VA.HostCancelOrEnd : GaiaCancel ack:
VA.HostCancelOrEnd : 1. do nothing\n

VA.HostCancelOrEnd : GaiaStart:
VA.HostCancelOrEnd : 1. VA.Idle -&gt; VA.VoiceRequesting
@enduml
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[知识小集-201908]]></title>
    <link href="http://sxgfxm.github.io/blog/2020/01/17/zhi-shi-xiao-ji-201908/"/>
    <updated>2020-01-17T11:47:39+08:00</updated>
    <id>http://sxgfxm.github.io/blog/2020/01/17/zhi-shi-xiao-ji-201908</id>
    <content type="html"><![CDATA[<h2>2019.08.06</h2>

<p><code>RPC failed; curl 56 LibreSSL SSL_read: SSL_ERROR_SYSCALL, errno 60</code>：拉取大文件时换成不够出错。<br/>
增大缓存空间：<code>git config https.postBuffer 524288000</code>，<code>git config http.postBuffer 524288000</code>。</p>

<h2>2019.08.07</h2>

<h3>SpeechSDK</h3>

<pre><code>@startwbs
* SpeechSDK
** Buf
*** set address
*** get address
*** set size
*** get size
** CallBackBase
*** call back with parameter
** Value
** SpeechSDS
*** make instance
*** set parameter
*** get parameter
*** get service
*** release service
*** clear up
*** destroy instance
** Service
*** invoke parameter
** Parameter
*** set parameter
*** get parameter
*** has parameter
*** drop parameter
*** clear parameter
@endwbs
</code></pre>

<h3>Speech Development Service</h3>

<pre><code>@startwbs
* Speech Development Service
** Hotword Service
*** SDS get Hotword service
*** invoke Hotword parameter
*** invoke start parameter
*** start recorder
*** invoke audio buf parameter
*** process Hotword call back
*** stop audio recorder
*** invoke stop parameter
*** SDS release Hotword service
*** SDS destroy SDS
** ASR Service
*** sds get ASR service
*** invoke ASR parameter
*** invoke start parameter
*** start recorder
*** invoke audio buf parameter
*** process ASR call back
*** stop audio recorder
*** invoke stop parameter
*** SDS release ASR service
*** SDS destroy SDS
** TTS Service
*** sds get TTS service
*** invoke TTS parameter
*** invoke start parameter
*** invoke text parameter
*** invok read parameter
*** append audio data and play
*** stop audio player
*** invoke stop parameter
*** SDS release TTS service
*** SDS destroy SDS
@endwbs
</code></pre>

<h3>AssistantEngin</h3>

<pre><code>@startwbs
* AssitantEngine
** Hotword
*** load Hotword model
*** start Hotword
*** stop Hotword
** ASR
*** start ASR
**** manual
**** auto
*** cancel ASR
*** stop ASR
** Text Query
** TTS
*** start TTS
**** text
**** type
**** url
*** stop TTS
@endwbs
</code></pre>

<h2>2019.08.15</h2>

<p><a href="http://www.mengyueping.com/2018/08/16/iOS_CocoaPods_03/">pod 私有库问题</a><br/>
<a href="http://adolsai.com/index.php/archives/cocoapods-private-error-list.html">pod 私有库问题</a><br/>
通过 <code>subspec</code> 实现目录结构分级；</p>

<p><strong>无法找到引用的第三方库</strong>：framework search path 有问题，设置<code>pod_target_xcconfig</code>时导致的。</p>

<p><strong>Undefined symbols for architecture arm64</strong>：在配置中增加 other linker flags。</p>

<p><strong>dyld: Library not loaded: @rpath</strong>：pod文件名与依赖库的名字相同，导致异常，更换pod名称。</p>

<p><strong>dynamic: Dynamic frameworks and libraries are only supported on iOS 8.0 and onwards</strong>：platform = :ios, &lsquo;9.0&rsquo;</p>

<p><strong>vendored framework not found</strong>：<a href="https://github.com/CocoaPods/CocoaPods/issues/1824">https://github.com/CocoaPods/CocoaPods/issues/1824</a> 改用'POD/file.h'</p>

<p><strong>Cocoapods wrapping around a static library without i386 architecture</strong>：s.pod_target_xcconfig = { &lsquo;VALID_ARCHS[sdk=iphonesimulator*]&rsquo; => &lsquo;&rsquo; }</p>

<p>source 中不要添加tag</p>

<h2>2019.08.20</h2>

<p>注意线程问题。</p>

<p><strong>HFP 状态下 AudioQueueNewOutput 无法正常播放音频</strong> 改为 A2DP 播放音频；</p>
]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ios | Light's Blog]]></title>
  <link href="http://sxgfxm.github.io/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://sxgfxm.github.io/"/>
  <updated>2017-11-27T11:28:12+08:00</updated>
  <id>http://sxgfxm.github.io/</id>
  <author>
    <name><![CDATA[Light]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOS知识小集-171120]]></title>
    <link href="http://sxgfxm.github.io/blog/2017/11/27/ioszhi-shi-xiao-ji-171120/"/>
    <updated>2017-11-27T11:25:53+08:00</updated>
    <id>http://sxgfxm.github.io/blog/2017/11/27/ioszhi-shi-xiao-ji-171120</id>
    <content type="html"><![CDATA[<h2>iOS 10.3之后删除线失效解决办法</h2>

<p>iOS 10.3之前写法：</p>

<pre><code class="objective-c">[attr addAttributes:@{
    NSStrikethroughStyleAttributeName: @(NSUnderlineStyleSingle)
  }
              range:NSMakeRange(0, string.length)];
</code></pre>

<p>iOS 10.3之后写法：</p>

<pre><code class="objective-c">[attr addAttributes:@{
    NSStrikethroughStyleAttributeName: @(NSUnderlineStyleSingle),
    NSBaselineOffsetAttributeName: @(NSUnderlineStyleNone)
  }
              range:NSMakeRange(0, string.length)];
</code></pre>

<!-- more -->


<h2>设置状态栏style</h2>

<p>在<code>info.plist</code>文件中设置<code>View controller-based status bar appearance</code>为<code>YES</code>。<br/>
在对应ViewController中添加下面的方法：</p>

<pre><code class="objective-c">- (UIStatusBarStyle)preferredStatusBarStyle {
  return UIStatusBarStyleLightContent;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS知识小集-171113]]></title>
    <link href="http://sxgfxm.github.io/blog/2017/11/17/ioszhi-shi-xiao-ji-171113/"/>
    <updated>2017-11-17T17:28:01+08:00</updated>
    <id>http://sxgfxm.github.io/blog/2017/11/17/ioszhi-shi-xiao-ji-171113</id>
    <content type="html"><![CDATA[<h2>include vs. import vs. class</h2>

<h3>include</h3>

<p>C语言中引用头文件的语法，无法防止重复引用头文件。</p>

<h3>import</h3>

<p>OC中引用头文件的语法，可以防止重复引用头文件，无法防止循环引用头文件。</p>

<h3>class</h3>

<p>使用<code>@class</code>告知编译器有这样一个类，书写代码时不要报错，真正调用该类的方法时，再<code>#import</code>该类。
可以防止循环引用头文件。</p>

<p>一般来讲，头文件中使用<code>@class</code>引用其他类，在源文件中<code>#import</code>该类。</p>

<!-- more -->


<h2>目录结构</h2>

<p>工程目录结构看出技术水平。<br/>
高内聚，低耦合原则。</p>

<h2>Group vs. Folder</h2>

<p>Group创建引用，并不会创建实际文件夹，方便工程内移动；<br/>
Folder会创建实际文件夹，方便磁盘文件与工程文件对应；</p>

<h2>下拉刷新</h2>

<p><code>-scrollViewDidScroll:</code>，下拉播放header view的动画；<br/>
<code>-scrollViewDidEndDragging:willDecelerate:</code>，松手后请求数据；<br/>
数据返回后切换到正在状态。</p>

<h2>AFNetworking 内存泄露</h2>

<p>如果在一个ViewController中发起网络请求，在数据返回之前退出ViewController，网络请求持有的两个block不会被释放。</p>

<h2>UIBaselineAdjustment</h2>

<p>当文字缩放时的对齐方法：<br/>
<code>UIBaselineAdjustmentNone</code>：top和top对齐；<br/>
<code>UIBaselineAdjustmentAlignBaselines</code>：top和centerY对齐；<br/>
<code>UIBaselineAdjustmentAlignCenters</code>：centerY和centerY对齐。</p>

<h2>Generated duplicate UUIDs</h2>

<p>解决CocoaPods 重复生成 UUID。<br/>
在<code>Podfile</code>中添加<code>install! 'cocoapods', :deterministic_uuids =&gt; false</code>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS知识小集-171106]]></title>
    <link href="http://sxgfxm.github.io/blog/2017/11/10/ioszhi-shi-xiao-ji-171106/"/>
    <updated>2017-11-10T17:01:04+08:00</updated>
    <id>http://sxgfxm.github.io/blog/2017/11/10/ioszhi-shi-xiao-ji-171106</id>
    <content type="html"><![CDATA[<h2>UIViewController modalPresentationStyle</h2>

<p>当present controller时，可以设置这个属性来控制present时的效果，可用于透明显示被遮盖的conroller，此情况下被遮盖的conroller不会调用viewDidDisappear。</p>

<!-- more -->


<h2>UIPageViewController vs. UIScrollView</h2>

<p>两者都可添加controller，实现滑动切换conroller切换的效果。<br/>
UIPageViewController支持子controller生命周期函数调用，添加到UIScrollView上的controller滑动时不会调用生命周期函数。<br/>
UIPageViewController便于代码分离。<br/>
UIPageViewController没有暴露bounces属性，无法通过系统API禁用，需要特殊操作才可以，这一点UIScrollView有优势。<br/>
UIPageViewController滑动时获取的contentOffset不够准确，需要特殊处理，这一点UIScrollView有优势。<br/>
特殊处理方法：</p>

<pre><code class="objective-c">//  设置UIPageViewController的scrollView的代理为self
for (id view in self.pageController.view.subviews) {
    if ([view isKindOfClass:[UIScrollView class]]) {
      UIScrollView *scrollView = (UIScrollView *)view;
      scrollView.delegate = self;
    }
 }
</code></pre>

<pre><code class="objective-c">- (void)setOffset:(CGFloat)offset {
    _offset = offset;
    //  Do something with offsetX
}

- (void)scrollViewDidScroll:(UIScrollView *)scrollView {
    CGFloat width = scrollView.bounds.size.width;
    CGFloat offset = self.offset;
    NSInteger childCount = self.childControllers.count;
    // 将当前滑动显示的view 的坐标 =&gt; self.view 的坐标
    for (UIViewController *vc in self.childControllers) {
      CGPoint p = [vc.view convertPoint:CGPointMake(0, 0) toView:self.view];
      if (p.x &gt; 0 &amp;&amp; p.x &lt; width) {
        NSInteger index = [self.childControllers indexOfObject:vc];
        offset = index * width - p.x;
      }
    }
    if (offset &gt;= (childCount - 1) * width) {
      CGPoint p = [self.childControllers.lastObject.view convertPoint:CGPointMake(0, 0) toView:self.view];
      offset = (childCount - 1) * width - p.x;
    }
    self.offset = offset;
}

- (void)scrollViewDidEndDecelerating:(UIScrollView *)scrollView {
    CGFloat width = scrollView.bounds.size.width;
    NSInteger index = round(self.offset / width);
    if (index &lt; 0) {
      index = self.childControllers.count - 1;
    }
    self.offset = index * width;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS知识小集-171030]]></title>
    <link href="http://sxgfxm.github.io/blog/2017/11/10/ioszhi-shi-xiao-ji-171030/"/>
    <updated>2017-11-10T16:39:04+08:00</updated>
    <id>http://sxgfxm.github.io/blog/2017/11/10/ioszhi-shi-xiao-ji-171030</id>
    <content type="html"><![CDATA[<h2>ReactiveObjC</h2>

<p>To be finished.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS知识小集-171023]]></title>
    <link href="http://sxgfxm.github.io/blog/2017/11/02/ioszhi-shi-xiao-ji-171023/"/>
    <updated>2017-11-02T10:34:10+08:00</updated>
    <id>http://sxgfxm.github.io/blog/2017/11/02/ioszhi-shi-xiao-ji-171023</id>
    <content type="html"><![CDATA[<h2>UITableView AccessoryView TintColor</h2>

<p>通过设置Cell的TintColor来设置AccessoryView的tintColor。</p>

<h2>Git Rebase</h2>

<p><code>git rebase</code>会删除<code>merge commit</code>。<br/>
进行merge操作后不要向其amend代码。</p>

<!-- more -->


<h2>UITableViewCell</h2>

<p>注意在返回cell的代理方法中，不要重复创建view。</p>

<h2>UITableViewCell高度自适应</h2>

<ol>
<li><code>estimatedRowHeight</code>；</li>
<li><code>-systemLayoutSizeFittingSize:</code> + cache height；</li>
<li>ComponentKit；</li>
</ol>


<h2>layoutIfNeeded、setNeedsLayout、setNeedsDisplay</h2>

<p>// TODO</p>

<h2>动态更新Cell高度</h2>

<pre><code class="objective-c">  [self.tableView beginUpdates];
  [self.tableView endUpdates];
</code></pre>

<h2>UIImageView Animation</h2>

<pre><code class="objective-c">  self.imageView = [[UIImageView alloc] initWithFrame:CGRectMake(100, 200, 50, 50)];
  self.imageView.animationImages = @[[UIImage imageNamed:@"Image1"],[UIImage imageNamed:@"Image2"],[UIImage imageNamed:@"Image3"]];
  self.imageView.animationDuration = 0.75;
  self.imageView.animationRepeatCount = 10;
  [self.view addSubview:self.imageView];
  [self.imageView startAnimating];
  [self.imageView stopAnimating];
</code></pre>

<h2>AVAudioPlayer Simple Use</h2>

<pre><code class="objective-c">- (AVAudioPlayer *)startAudioPlayer {
  if (!_startAudioPlayer) {
    NSString *path = [NSString stringWithFormat:@"%@/startAudio.wav", [[NSBundle mainBundle] resourcePath]];
    NSURL *soundURL = [NSURL fileURLWithPath:path];
    NSError *error = nil;
    _startAudioPlayer = [[AVAudioPlayer alloc] initWithContentsOfURL:soundURL error:&amp;error];
    if (error) {
      DDLogDebug(@"Can't find audio file %@", error.localizedDescription);
    }
  }
  return _startAudioPlayer;
}
</code></pre>

<pre><code class="objective-c">  [self.startAudioPlayer play];
  [self.startAudioPlayer pause];
</code></pre>

<h2>模糊效果</h2>

<h3>UIBlurEffect</h3>

<p>可以选择模糊亮度，但无法自定义模糊半径。</p>

<pre><code class="objective-c">  UIBlurEffect *blurEffect = [UIBlurEffect effectWithStyle:UIBlurEffectStyleLight];
  UIVisualEffectView *blurView = [[UIVisualEffectView alloc] initWithEffect:blurEffect];
  blurView.frame = myView.bounds;
  [myView addSubview:blurView];
</code></pre>

<h3>CIImage &amp; CIFilter</h3>

<p>可以选择滤波算法，并设置滤波参数。</p>

<pre><code class="objective-c">- (UIImage *)convertToBlurImage:(UIImage *)image {
  //  create input image
  CIImage *inputImage = [CIImage imageWithCGImage:[image CGImage]];
  //  create filter
  CIFilter *gaussianBlurFilter = [CIFilter filterWithName:@"CIGaussianBlur"];
  //  set filter parameters
  [gaussianBlurFilter setDefaults];
  [gaussianBlurFilter setValue:inputImage forKey:kCIInputImageKey];
  [gaussianBlurFilter setValue:@6 forKey:kCIInputRadiusKey];
  //  create output image
  CIImage *outputImage = [gaussianBlurFilter outputImage];
  CIContext *context = [CIContext contextWithOptions:nil];
  CGImageRef cgimg = [context createCGImage:outputImage fromRect:[inputImage extent]];
  //  get UIImage
  UIImage *convertedImage = [UIImage imageWithCGImage:cgimg];
  return convertedImage;
}
</code></pre>

<h2>UIView to UIImage</h2>

<pre><code class="objective-c">- (UIImage *)imageFromUIView:(UIView *)view {
  UIGraphicsBeginImageContextWithOptions(view.bounds.size, YES, 0.0);
  //  render view in context
  [view.layer renderInContext:UIGraphicsGetCurrentContext()];
  //  get image from context
  UIImage *image = UIGraphicsGetImageFromCurrentImageContext();
  UIGraphicsEndImageContext();
  return image;
}
</code></pre>
]]></content>
  </entry>
  
</feed>

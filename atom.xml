<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Light's Blog]]></title>
  <link href="http://sxgfxm.github.io/atom.xml" rel="self"/>
  <link href="http://sxgfxm.github.io/"/>
  <updated>2016-10-19T09:29:10+08:00</updated>
  <id>http://sxgfxm.github.io/</id>
  <author>
    <name><![CDATA[Light]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[UICollectionView iOS 10 New Features]]></title>
    <link href="http://sxgfxm.github.io/blog/2016/10/18/uicollectionview-ios10-new-features/"/>
    <updated>2016-10-18T20:01:45+08:00</updated>
    <id>http://sxgfxm.github.io/blog/2016/10/18/uicollectionview-ios10-new-features</id>
    <content type="html"><![CDATA[<h2>Background</h2>

<p>iPhone屏幕的刷新频率固定为60fps，为了达到流畅的滑动效果，iOS应用展示必须满足该条件。当帧率很低时，就会出现明显的卡顿现象。</p>

<p>60fps相当于每帧16.67毫秒，在这么短的时间内collection view可能并不能完成从相对较慢的数据源加载数据。为了提升collection view性能，一个常用的技巧是使<code>cellForItemAtIndexPath</code>尽可能快的返回cell，比如异步加载网络图片等。为了进一步提高collection view性能，并且尽量减少开发者的工作，在iOS 10中引入了新特性。</p>

<h2>UICollectionView API变化</h2>

<h4>新增UICollectionViewDataSourcePrefetching协议</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">@protocol</span> <span class="nc">UICollectionViewDataSourcePrefetching</span> <span class="o">&lt;</span><span class="bp">NSObject</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@required</span>
</span><span class='line'><span class="c1">// indexPaths are ordered ascending by geometric distance from the collection view</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">collectionView</span><span class="p">:(</span><span class="bp">UICollectionView</span> <span class="o">*</span><span class="p">)</span><span class="n">collectionView</span> <span class="nl">prefetchItemsAtIndexPaths</span><span class="p">:(</span><span class="bp">NSArray</span><span class="o">&lt;</span><span class="bp">NSIndexPath</span> <span class="o">*&gt;</span> <span class="o">*</span><span class="p">)</span><span class="n">indexPaths</span> <span class="n">NS_AVAILABLE_IOS</span><span class="p">(</span><span class="mi">10</span><span class="n">_0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">@optional</span>
</span><span class='line'><span class="c1">// indexPaths that previously were considered as candidates for pre-fetching, but were not actually used; may be a subset of the previous call to -collectionView:prefetchItemsAtIndexPaths:</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">collectionView</span><span class="p">:(</span><span class="bp">UICollectionView</span> <span class="o">*</span><span class="p">)</span><span class="n">collectionView</span> <span class="nl">cancelPrefetchingForItemsAtIndexPaths</span><span class="p">:(</span><span class="bp">NSArray</span><span class="o">&lt;</span><span class="bp">NSIndexPath</span> <span class="o">*&gt;</span> <span class="o">*</span><span class="p">)</span><span class="n">indexPaths</span>  <span class="n">NS_AVAILABLE_IOS</span><span class="p">(</span><span class="mi">10</span><span class="n">_0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这两个方法均异步执行，可用于异步加载图片等。</p>

<h4>新增prefetchDataSource代理</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">weak</span><span class="p">,</span> <span class="n">nullable</span><span class="p">)</span> <span class="kt">id</span><span class="o">&lt;</span><span class="n">UICollectionViewDataSourcePrefetching</span><span class="o">&gt;</span> <span class="n">prefetchDataSource</span> <span class="n">NS_AVAILABLE_IOS</span><span class="p">(</span><span class="mi">10</span><span class="n">_0</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h4>新增prefetchingEnabled属性</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">getter</span><span class="o">=</span><span class="n">isPrefetchingEnabled</span><span class="p">)</span> <span class="kt">BOOL</span> <span class="n">prefetchingEnabled</span> <span class="n">NS_AVAILABLE_IOS</span><span class="p">(</span><span class="mi">10</span><span class="n">_0</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Prefetching</h2>

<p>当collection view滑动速率将要超过<code>cellForItemAtIndexPath</code>返回cell的速率时，collection view会调用<code>prefetchItemAtIndexPaths:</code>方法。</p>

<p>collection view会把<strong>可能</strong>即将需要展示的cell的IndexPath放入数组中传递给prefetch方法。这为我们提供了预处理数据机会。比如，当我们需要加载网络图片时，可以在prefetch方法中请求网络数据，并把下载的数据插入到<strong>data source</strong>中，为<code>cellForItemAtIndexPath</code>的使用做准备。</p>

<p>当collection view滑动方向改变时，collection view会调用<code>cancelPrefetchingForItemsAtIndexPaths</code>方法。</p>

<p>该方法的目的是取消<strong>原本可能</strong>即将展示的cell的预加载数据工作。参数同样是IndexPath的数组。</p>

<h2>UICollectionView Cell生命周期变化</h2>

<h4>UICollectionViewCell Lifecycle: iOS &lt;= 9</h4>

<p> <img src="../images/UICollectionViewCell/UICollectionViewLifecycle_iOS_9.jpeg" alt="UICollectionViewLifecycle_iOS_9" /></p>

<ol>
<li>首先，调用<code>cellForItemAtIndexPath:</code>，从复用队列中弹出一个<strong>cell</strong>，准备对其调用<code>prepareForReuse</code>。</li>
<li>然后，根据需求设置<strong>cell</strong>的内容，比如<strong>labels</strong>等。</li>
<li>当<strong>cell</strong>即将出现时，调用<code>collectionView:willDisplayCell:forItemAtindexPath:</code>。</li>
<li>当<strong>cell</strong>消失时，调用<code>collectionView:didEndDisplayingCell:forItemAtIndexPath:</code>。此时<strong>cell</strong>会重新进入复用队列，等待复用。</li>
<li>当用户向相反方向再次把<strong>cell</strong>滑回屏幕时，会重新从第一步开始执行。</li>
</ol>


<h4>UICollectionViewCell Lifecycle: iOS 10</h4>

<p> <img src="../images/UICollectionViewCell/UICollectionViewLifecycle_iOS_10.jpeg" alt="UICollectionViewLifecycle_iOS_10" /></p>

<p>在iOS 10中，前3个步骤与iOS 9是相同的，新的变化发生在<strong>cell</strong>滑出屏幕的时候。</p>

<p>当调用<code>collectionView:didEndDisplayingCell:forItemAtIndexPath:</code>后，<strong>cell</strong>不会立刻进入复用队列，系统会<strong>keeps it around for a bit</strong>。相当于会缓存该<strong>cell</strong>一小段时间，在这段时间内如果该<strong>cell</strong>再次回到屏幕中，便不会重新调用<code>cellForItemAtIndexPath:</code>，而是直接显示。</p>

<p>至于系统会缓存多久，官方并没有给出明确的时间，感觉跟程序运行时开销有关。</p>

<p>如果想关闭该功能，需要设置<code>collectionView.prefetchingEnabled = NO;</code>。</p>

<p> <img src="../images/UICollectionViewCell/multiple_cells.jpeg" alt="multiple_cells" /></p>

<p>collection view包含多列的情况，主要体现cell的<strong>独立性</strong>。</p>

<p>当某一行需要展示时，每个cell独立出队并调用<code>cellForItemAtIndexPath:</code>方法；</p>

<p>当该行即将展示时，每个cell调用<code>willDisplayCell:atIndexPath:</code>。</p>

<h2>总结</h2>

<ul>
<li>这些变化对开发者都是透明的，对开发者来说只需利用好prefetch特性。</li>
<li>prefetch进一步提升了collection view的性能，尤其是获取cell数据开销比较大或者比较慢时。</li>
<li>每个cell独立出队，单独设置，确保cell在展示之前总是ready。</li>
<li>UITableView拥有相同的新特性。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Github Blog - 自定义]]></title>
    <link href="http://sxgfxm.github.io/blog/2016/10/18/github-blog-zi-ding-yi/"/>
    <updated>2016-10-18T15:48:51+08:00</updated>
    <id>http://sxgfxm.github.io/blog/2016/10/18/github-blog-zi-ding-yi</id>
    <content type="html"><![CDATA[<h2>Octopress目录结构</h2>

<h3>Rakefile</h3>

<p>rake的配置文件，类似于makefile。</p>

<h3>Gemfile</h3>

<p>bundle要下载需要的gem依赖关系的指定文件。</p>

<h3>_config.yml</h3>

<p>站点的配置文件。</p>

<h3>public/</h3>

<p><code>rake generate</code>静态编译完成后的目录，该目录为网站展示的目录。</p>

<h3>_deploy/</h3>

<p><code>rake deploy</code>deploy时生成的缓存文件夹，内容和public目录一样。</p>

<p>该目录中内容由Octopress自动提交至Github远程仓库的<strong>master</strong>分支。</p>

<h3>sass/</h3>

<p>css文件的源文件目录。</p>

<h3>plugins/</h3>

<p>放置自带及第三方插件目录，ruby程序。</p>

<h3>source/</h3>

<p>站点的源文件目录，public目录就是根据该目录下数据生成的。</p>

<p>该目录中内容由用户手动提交至Github远程仓库的<strong>source</strong>分支。</p>

<h4>_includes/custom/</h4>

<p>自定义的模板目录。</p>

<h4>_includes/asides/</h4>

<p>边栏模板目录。</p>

<h4>_includes/post/</h4>

<p>文章页面相应模板目录。</p>

<h4>_layouts/</h4>

<p>默认网站html相关文件，最底层。</p>

<h4>_posts/</h4>

<p>文章源文件，由<code>rake new_post["article name"]</code>命令产生。</p>

<h4>_stylesheets/</h4>

<p>css文件目录。</p>

<h4>javascripts/</h4>

<p>js文件目录。</p>

<h4>images/</h4>

<p>图片目录。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Github Blog - 基本操作]]></title>
    <link href="http://sxgfxm.github.io/blog/2016/10/18/github-blog-ji-ben-cao-zuo/"/>
    <updated>2016-10-18T08:58:48+08:00</updated>
    <id>http://sxgfxm.github.io/blog/2016/10/18/github-blog-ji-ben-cao-zuo</id>
    <content type="html"><![CDATA[<h2>创建博文</h2>

<p><code>rake new_post["article_name"]</code></p>

<p>默认会在octopress/source/_post/目录下生成.markdown文件。</p>

<h2>删除博文</h2>

<p>只需删除对应的markdown文件即可。</p>

<h2>预览博文</h2>

<p><code>rake generate</code></p>

<p>默认会在octopress/public/blog/目录下生成<strong>HTML</strong>页面。</p>

<p><code>rake preview</code></p>

<p>本地预览，地址为 <a href="http://localhost:4000">http://localhost:4000</a> ，必须使用<code>ctrl+c</code>终止预览，<code>ctrl+z</code>只起到挂起作用，当再次预览时会提示socket端口被占用。</p>

<h2>发布博文</h2>

<p><code>rake deploy</code></p>

<p>先将本地博客存放至octopress/_deploy目录下，然后push至github上远程仓库的<strong>master</strong>分支。</p>

<p>可以在_deploy目录下执行<code>git reset --hard origin master</code>强制同步远程仓库master分支内容，已解决不能push的问题。</p>

<h2>push至Github</h2>

<p>手动push源代码至github上远程仓库的<strong>source</strong>分支。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git add .
</span><span class='line'>git commit -m "commit message"
</span><span class='line'>git push origin source</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Github Blog - 搭建]]></title>
    <link href="http://sxgfxm.github.io/blog/2016/10/18/github-blog-da-jian/"/>
    <updated>2016-10-18T08:44:43+08:00</updated>
    <id>http://sxgfxm.github.io/blog/2016/10/18/github-blog-da-jian</id>
    <content type="html"><![CDATA[<h2>安装Git</h2>

<h2>安装Ruby</h2>

<p>推荐使用RVM。</p>

<h2>安装DevKit</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem install devkit</span></code></pre></td></tr></table></div></figure>


<h2>克隆Octopress库</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone git://github.com/imathis/octopress.git </span></code></pre></td></tr></table></div></figure>


<h2>安装Octopress依赖项</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem install bundler
</span><span class='line'>bundler install</span></code></pre></td></tr></table></div></figure>


<h2>安装Octopress默认主题</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake install</span></code></pre></td></tr></table></div></figure>


<h2>关联Octopress至Github</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake setup_github_pages</span></code></pre></td></tr></table></div></figure>


<p>在Repository url中输入对应的仓库地址。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Markdown Syntax]]></title>
    <link href="http://sxgfxm.github.io/blog/2016/10/17/markdown-syntax/"/>
    <updated>2016-10-17T20:34:29+08:00</updated>
    <id>http://sxgfxm.github.io/blog/2016/10/17/markdown-syntax</id>
    <content type="html"><![CDATA[<h2>Format</h2>

<table>
<thead>
<tr>
<th style="text-align:left;"> 语法                          </th>
<th style="text-align:left;"> 效果                         </th>
<th style="text-align:left;"> 快捷键           </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> **strong**                 </td>
<td style="text-align:left;"> <strong>strong</strong>                 </td>
<td style="text-align:left;"> ⌘ + B         </td>
</tr>
<tr>
<td style="text-align:left;"> *emphasis*                 </td>
<td style="text-align:left;"> <em>emphasis</em>                 </td>
<td style="text-align:left;"> ⌘ + I         </td>
</tr>
<tr>
<td style="text-align:left;"> \<u>underline</u>           </td>
<td style="text-align:left;"> <u>underline</u>           </td>
<td style="text-align:left;"> ⌘ + U         </td>
</tr>
<tr>
<td style="text-align:left;"> `code`                     </td>
<td style="text-align:left;"> <code>code</code>                     </td>
<td style="text-align:left;"> ⌘ + shift + ` </td>
</tr>
<tr>
<td style="text-align:left;"> \<del>strike</del>                 </td>
<td style="text-align:left;"> <del>strike</del>                 </td>
<td style="text-align:left;">               </td>
</tr>
<tr>
<td style="text-align:left;"> [百度](<a href="http://www.baidu.com">http://www.baidu.com</a>) </td>
<td style="text-align:left;"> <a href="http://www.baidu.com">百度</a> </td>
<td style="text-align:left;"> ⌘ + K         </td>
</tr>
<tr>
<td style="text-align:left;"> <img src="imageSource" alt="imageName" />   </td>
<td style="text-align:left;">                            </td>
<td style="text-align:left;"> ⌘ + alt + I   </td>
</tr>
<tr>
<td style="text-align:left;"> \                          </td>
<td style="text-align:left;"> clear format               </td>
<td style="text-align:left;"> ⌘ + \         </td>
</tr>
</tbody>
</table>


<h2>Paragraph</h2>

<h3>Heading</h3>

<ul>
<li><p>语法</p>

<ul>
<li>#h1</li>
<li>##h2</li>
<li>###h3</li>
<li>####h4</li>
<li>#####h5</li>
<li>######h6</li>
</ul>
</li>
<li><p>效果</p>

<ul>
<li><h1>h1</h1></li>
<li><h2>h2</h2></li>
<li><h3>h3</h3></li>
<li><h4>h4</h4></li>
<li><h5>h5</h5></li>
<li><h6>h6</h6></li>
</ul>
</li>
<li><p>快捷键</p>

<ul>
<li>⌘ + 数字键</li>
</ul>
</li>
</ul>


<h3>Code Block</h3>

<ul>
<li><p>语法</p>

<ul>
<li>\~~~</li>
</ul>
</li>
<li><p>效果</p>

<ul>
<li><pre><code>code block
</code></pre></li>
</ul>
</li>
<li><p>快捷键</p>

<ul>
<li>⌘ + alt + C</li>
</ul>
</li>
</ul>


<h3>Quote</h3>

<ul>
<li><p>语法</p>

<ul>
<li>>引用</li>
</ul>
</li>
<li><p>效果</p>

<ul>
<li><blockquote><p>引用</p></blockquote></li>
</ul>
</li>
<li><p>快捷键</p>

<ul>
<li>⌘ + alt +Q</li>
</ul>
</li>
</ul>


<h3>Horizontal Line</h3>

<ul>
<li><p>语法</p>

<ul>
<li>-&ndash;</li>
</ul>
</li>
<li><p>效果</p>

<hr /></li>
<li><p>快捷键</p>

<ul>
<li>⌘ + shift + -</li>
</ul>
</li>
</ul>


<h3>Ordered List</h3>

<ul>
<li>语法

<ul>
<li>\1. Item</li>
<li>\2. Item</li>
<li>\3. Item</li>
</ul>
</li>
<li>效果

<ul>
<li><ol>
<li>Item</li>
</ol>
</li>
<li><ol>
<li>Item</li>
</ol>
</li>
<li><ol>
<li>Item</li>
</ol>
</li>
</ul>
</li>
<li>快捷键

<ul>
<li>⌘ + alt + O</li>
</ul>
</li>
</ul>


<h3>Unordered List</h3>

<ul>
<li>语法

<ul>
<li>* Item</li>
<li>* Item</li>
<li>* Item</li>
</ul>
</li>
<li>效果

<ul>
<li><ul>
<li>Item</li>
</ul>
</li>
<li><ul>
<li>Item</li>
</ul>
</li>
<li><ul>
<li>Item</li>
</ul>
</li>
</ul>
</li>
<li>快捷键

<ul>
<li>⌘ + alt + U</li>
</ul>
</li>
</ul>


<h3>Table List</h3>

<ul>
<li><p>快捷键</p>

<ul>
<li>⌘ + T</li>
</ul>
</li>
<li><p>效果</p>

<ul>
<li><table>
<thead>
<tr>
<th> 1    </th>
<th> 2    </th>
<th> 3    </th>
</tr>
</thead>
<tbody>
<tr>
<td> 4    </td>
<td> 5    </td>
<td> 6    </td>
</tr>
<tr>
<td> 7    </td>
<td> 8    </td>
<td> 9    </td>
</tr>
</tbody>
</table>
</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello Github Blog]]></title>
    <link href="http://sxgfxm.github.io/blog/2016/10/16/hello-github-blog/"/>
    <updated>2016-10-16T20:45:37+08:00</updated>
    <id>http://sxgfxm.github.io/blog/2016/10/16/hello-github-blog</id>
    <content type="html"><![CDATA[<p><strong>Hello world !</strong></p>

<p>以此纪念独立搭建的<strong>Github Blog</strong>。</p>

<p>感谢<strong>Github Pages</strong>免费空间，感谢<strong>Octopress</strong>静态化博客系统。</p>

<p>感谢带我入门的Web前端工程师<strong>bounlusin</strong>（ 博客：<a href="http://bounlusin.github.io">http://bounlusin.github.io</a> ）</p>

<p>感谢极客学院建立<strong>Github Blog</strong>教程 <a href="http://wiki.jikexueyuan.com/project/github-page/">http://wiki.jikexueyuan.com/project/github-page/</a></p>

<p><strong>If you really want it , just make everyday count !</strong></p>
]]></content>
  </entry>
  
</feed>
